
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 01 15:03:48 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 01 15:03:48 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\010\000\002\002\004\000\002\023" +
    "\004\000\002\023\002\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\011\000\002\030\005\000" +
    "\002\025\004\000\002\025\002\000\002\026\006\000\002" +
    "\026\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\003\004\000\002\003\002" +
    "\000\002\062\002\000\002\005\010\000\002\033\004\000" +
    "\002\033\002\000\002\034\005\000\002\032\004\000\002" +
    "\032\002\000\002\031\007\000\002\031\012\000\002\031" +
    "\011\000\002\031\014\000\002\004\004\000\002\004\002" +
    "\000\002\007\013\000\002\035\003\000\002\035\003\000" +
    "\002\010\006\000\002\010\002\000\002\036\004\000\002" +
    "\036\002\000\002\037\006\000\002\006\003\000\002\014" +
    "\004\000\002\014\002\000\002\013\003\000\002\013\003" +
    "\000\002\013\007\000\002\021\007\000\002\021\011\000" +
    "\002\020\005\000\002\020\004\000\002\020\007\000\002" +
    "\020\007\000\002\020\011\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\011\000\002\022\004" +
    "\000\002\022\005\000\002\022\003\000\002\022\003\000" +
    "\002\041\004\000\002\041\002\000\002\042\004\000\002" +
    "\042\002\000\002\044\004\000\002\040\004\000\002\045" +
    "\004\000\002\045\002\000\002\046\004\000\002\043\004" +
    "\000\002\050\004\000\002\050\002\000\002\051\004\000" +
    "\002\047\003\000\002\047\005\000\002\016\004\000\002" +
    "\016\005\000\002\053\004\000\002\053\002\000\002\054" +
    "\004\000\002\017\004\000\002\055\004\000\002\055\002" +
    "\000\002\056\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\006\000\002\012\003\000\002\012\003\000\002" +
    "\012\004\000\002\012\007\000\002\012\005\000\002\015" +
    "\004\000\002\060\004\000\002\060\002\000\002\061\004" +
    "\000\002\061\005\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\011\003\000\002\011\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\004\004\005\001\002\000\004\002\313\001" +
    "\002\000\004\021\006\001\002\000\014\003\ufffe\005\ufffe" +
    "\021\ufffe\024\ufffe\032\ufffe\001\002\000\014\003\014\005" +
    "\016\021\uffee\024\020\032\017\001\002\000\014\003\uffff" +
    "\005\uffff\021\uffff\024\uffff\032\uffff\001\002\000\004\021" +
    "\022\001\002\000\014\003\ufffb\005\ufffb\021\ufffb\024\ufffb" +
    "\032\ufffb\001\002\000\014\003\ufffc\005\ufffc\021\ufffc\024" +
    "\ufffc\032\ufffc\001\002\000\006\007\ufff7\012\ufff7\001\002" +
    "\000\014\003\ufffd\005\ufffd\021\ufffd\024\ufffd\032\ufffd\001" +
    "\002\000\010\006\uffe2\017\uffe2\021\uffe2\001\002\000\004" +
    "\021\042\001\002\000\004\021\022\001\002\000\004\021" +
    "\023\001\002\000\052\005\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\015\uffd9\021\uffd9\030\uffd9\031\uffd9\037\uffd9\040\uffd9\043" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\001\002\000\004\016\024\001" +
    "\002\000\012\020\026\025\031\026\025\027\030\001\002" +
    "\000\006\007\ufff2\012\ufff2\001\002\000\006\007\ufff4\012" +
    "\ufff4\001\002\000\006\007\ufff7\012\ufff7\001\002\000\006" +
    "\007\ufff1\012\ufff1\001\002\000\006\007\ufff3\012\ufff3\001" +
    "\002\000\006\007\033\012\035\001\002\000\014\003\ufffa" +
    "\005\ufffa\021\ufffa\024\ufffa\032\ufffa\001\002\000\006\007" +
    "\ufff8\012\ufff8\001\002\000\006\003\036\021\037\001\002" +
    "\000\006\007\ufff5\012\ufff5\001\002\000\004\016\040\001" +
    "\002\000\012\020\026\025\031\026\025\027\030\001\002" +
    "\000\006\007\ufff6\012\ufff6\001\002\000\006\005\044\033" +
    "\043\001\002\000\004\021\022\001\002\000\010\005\uffef" +
    "\006\uffef\021\uffef\001\002\000\010\005\050\006\046\021" +
    "\uffee\001\002\000\014\003\uffe7\005\uffe7\021\uffe7\024\uffe7" +
    "\032\uffe7\001\002\000\010\005\ufff0\006\ufff0\021\ufff0\001" +
    "\002\000\010\006\uffe2\017\uffe2\021\uffe2\001\002\000\010" +
    "\006\052\017\056\021\022\001\002\000\004\006\265\001" +
    "\002\000\004\021\uffe0\001\002\000\004\021\057\001\002" +
    "\000\010\006\uffe3\017\uffe3\021\uffe3\001\002\000\004\021" +
    "\uffdf\001\002\000\004\010\060\001\002\000\006\011\uffdd" +
    "\021\022\001\002\000\004\021\253\001\002\000\004\011" +
    "\063\001\002\000\006\005\uffef\021\uffef\001\002\000\006" +
    "\005\065\021\uffee\001\002\000\024\005\uffd7\006\uffd7\013" +
    "\uffd7\014\uffd7\021\uffd7\022\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\001\002\000\024\005\103\006\075\013\077\014\101\021" +
    "\071\022\074\034\070\035\102\036\067\001\002\000\004" +
    "\010\247\001\002\000\004\010\243\001\002\000\060\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\015\uffa2\016\uffa2\030\uffa2" +
    "\031\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\001\002\000\024\005\uffd5\006" +
    "\uffd5\013\uffd5\014\uffd5\021\uffd5\022\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\001\002\000\012\010\227\016\226\041\223\042" +
    "\225\001\002\000\004\010\170\001\002\000\010\006\uffe1" +
    "\017\uffe1\021\uffe1\001\002\000\024\005\uffd8\006\uffd8\013" +
    "\uffd8\014\uffd8\021\uffd8\022\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\001\002\000\004\010\160\001\002\000\024\005\uffd6\006" +
    "\uffd6\013\uffd6\014\uffd6\021\uffd6\022\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\001\002\000\022\007\121\010\112\020\114\021" +
    "\071\025\120\027\115\043\107\044\111\001\002\000\004" +
    "\007\106\001\002\000\024\005\uffd7\006\uffd7\013\uffd7\014" +
    "\uffd7\021\uffd7\022\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002" +
    "\000\024\005\103\006\105\013\077\014\101\021\071\022" +
    "\074\034\070\035\102\036\067\001\002\000\026\005\uffcc" +
    "\006\uffcc\013\uffcc\014\uffcc\021\uffcc\022\uffcc\023\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\001\002\000\026\005\uffd0\006\uffd0" +
    "\013\uffd0\014\uffd0\021\uffd0\022\uffd0\023\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\001\002\000\016\010\112\020\114\021\071" +
    "\025\120\027\115\044\111\001\002\000\004\007\155\001" +
    "\002\000\004\021\022\001\002\000\020\010\112\020\114" +
    "\021\071\025\120\027\115\043\107\044\111\001\002\000" +
    "\046\007\uffab\010\137\011\uffab\012\uffab\015\uffab\031\uffab" +
    "\037\uffab\040\uffab\043\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\001\002" +
    "\000\044\007\uffac\011\uffac\012\uffac\015\uffac\031\uffac\037" +
    "\uffac\040\uffac\043\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\001\002\000" +
    "\044\007\uffa8\011\uffa8\012\uffa8\015\uffa8\031\uffa8\037\uffa8" +
    "\040\uffa8\043\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000\036" +
    "\007\uffb2\011\uffb2\012\uffb2\015\uffb2\031\uffb2\037\uffb2\040" +
    "\uffb2\043\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\056\uffb2\001\002\000\044\007\uffae\011\uffae\012\uffae\015" +
    "\uffae\031\uffae\037\uffae\040\uffae\043\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\uffae\001\002\000\044\007\uffa9\011\uffa9\012\uffa9\015\uffa9" +
    "\031\uffa9\037\uffa9\040\uffa9\043\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\001\002\000\026\005\uffca\006\uffca\013\uffca\014\uffca\021" +
    "\uffca\022\uffca\023\uffca\034\uffca\035\uffca\036\uffca\001\002" +
    "\000\044\007\uffb0\011\uffb0\012\uffb0\015\uffb0\031\uffb0\037" +
    "\uffb0\040\uffb0\043\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\123\054\126\055\124\056\uffb0\001\002\000" +
    "\016\010\uff97\020\uff97\021\uff97\025\uff97\027\uff97\044\uff97" +
    "\001\002\000\016\010\uff95\020\uff95\021\uff95\025\uff95\027" +
    "\uff95\044\uff95\001\002\000\044\007\uffaf\011\uffaf\012\uffaf" +
    "\015\uffaf\031\uffaf\037\uffaf\040\uffaf\043\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\001\002\000\016\010\uff96\020\uff96\021\uff96\025" +
    "\uff96\027\uff96\044\uff96\001\002\000\016\010\112\020\114" +
    "\021\071\025\120\027\115\044\111\001\002\000\044\007" +
    "\uffad\011\uffad\012\uffad\015\uffad\031\uffad\037\uffad\040\uffad" +
    "\043\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\001\002\000\036\007\uffb5" +
    "\011\uffb5\012\uffb5\015\132\031\uffb5\037\uffb5\040\uffb5\043" +
    "\134\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\056\uffb5" +
    "\001\002\000\016\010\uff99\020\uff99\021\uff99\025\uff99\027" +
    "\uff99\044\uff99\001\002\000\036\007\uffb3\011\uffb3\012\uffb3" +
    "\015\uffb3\031\uffb3\037\uffb3\040\uffb3\043\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\056\uffb3\001\002\000\016" +
    "\010\uff98\020\uff98\021\uff98\025\uff98\027\uff98\044\uff98\001" +
    "\002\000\016\010\112\020\114\021\071\025\120\027\115" +
    "\044\111\001\002\000\036\007\uffb1\011\uffb1\012\uffb1\015" +
    "\uffb1\031\uffb1\037\uffb1\040\uffb1\043\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\056\uffb1\001\002\000\022\010" +
    "\112\011\uffc3\020\114\021\071\025\120\027\115\043\107" +
    "\044\111\001\002\000\006\011\uffc1\012\uffc1\001\002\000" +
    "\004\011\142\001\002\000\044\007\uffaa\011\uffaa\012\uffaa" +
    "\015\uffaa\031\uffaa\037\uffaa\040\uffaa\043\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\001\002\000\006\011\uffc4\012\145\001\002\000" +
    "\006\011\uffc2\012\uffc2\001\002\000\020\010\112\020\114" +
    "\021\071\025\120\027\115\043\107\044\111\001\002\000" +
    "\006\011\uffc0\012\uffc0\001\002\000\004\011\150\001\002" +
    "\000\044\007\uffa5\011\uffa5\012\uffa5\015\uffa5\031\uffa5\037" +
    "\uffa5\040\uffa5\043\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002\000" +
    "\046\007\uffa7\011\uffa7\012\uffa7\015\uffa7\030\152\031\uffa7" +
    "\037\uffa7\040\uffa7\043\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002" +
    "\000\020\010\112\020\114\021\071\025\120\027\115\043" +
    "\107\044\111\001\002\000\004\031\154\001\002\000\044" +
    "\007\uffa6\011\uffa6\012\uffa6\015\uffa6\031\uffa6\037\uffa6\040" +
    "\uffa6\043\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\001\002\000\026\005" +
    "\uffcb\006\uffcb\013\uffcb\014\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\001\002\000\036\007\uffb2\011" +
    "\uffb2\012\uffb2\015\uffb2\031\uffb2\037\uffb2\040\uffb2\043\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\056\uffb2\001" +
    "\002\000\036\007\uffb4\011\uffb4\012\uffb4\015\132\031\uffb4" +
    "\037\uffb4\040\uffb4\043\134\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\056\uffb4\001\002\000\020\010\112\020\114" +
    "\021\071\025\120\027\115\043\107\044\111\001\002\000" +
    "\006\011\162\012\163\001\002\000\004\007\167\001\002" +
    "\000\004\020\164\001\002\000\004\011\165\001\002\000" +
    "\004\007\166\001\002\000\026\005\uffcd\006\uffcd\013\uffcd" +
    "\014\uffcd\021\uffcd\022\uffcd\023\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\001\002\000\026\005\uffce\006\uffce\013\uffce\014\uffce" +
    "\021\uffce\022\uffce\023\uffce\034\uffce\035\uffce\036\uffce\001" +
    "\002\000\020\010\112\020\114\021\071\025\120\027\115" +
    "\043\107\044\111\001\002\000\024\011\uffb7\037\uffb7\040" +
    "\uffb7\046\214\047\213\050\215\051\221\052\216\056\217" +
    "\001\002\000\004\011\205\001\002\000\010\011\uffb9\037" +
    "\uffb9\040\uffb9\001\002\000\006\011\uffbd\037\uffbd\001\002" +
    "\000\006\011\uffbf\037\177\001\002\000\006\011\uffbe\037" +
    "\uffbe\001\002\000\020\010\112\020\114\021\071\025\120" +
    "\027\115\043\107\044\111\001\002\000\006\011\uffbc\037" +
    "\uffbc\001\002\000\010\011\uffbb\037\uffbb\040\203\001\002" +
    "\000\010\011\uffba\037\uffba\040\uffba\001\002\000\020\010" +
    "\112\020\114\021\071\025\120\027\115\043\107\044\111" +
    "\001\002\000\010\011\uffb8\037\uffb8\040\uffb8\001\002\000" +
    "\022\005\103\013\077\014\101\021\071\022\074\034\070" +
    "\035\102\036\067\001\002\000\024\005\uffd3\006\uffd3\013" +
    "\uffd3\014\uffd3\021\uffd3\022\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\001\002\000\026\005\uffd6\006\uffd6\013\uffd6\014\uffd6\021" +
    "\uffd6\022\uffd6\023\210\034\uffd6\035\uffd6\036\uffd6\001\002" +
    "\000\020\005\103\013\077\014\101\021\071\022\074\035" +
    "\102\036\067\001\002\000\024\005\uffd2\006\uffd2\013\uffd2" +
    "\014\uffd2\021\uffd2\022\uffd2\034\uffd2\035\uffd2\036\uffd2\001" +
    "\002\000\026\005\uffc9\006\uffc9\013\uffc9\014\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\034\uffc9\035\uffc9\036\uffc9\001\002\000" +
    "\020\010\uff9b\020\uff9b\021\uff9b\025\uff9b\027\uff9b\043\uff9b" +
    "\044\uff9b\001\002\000\020\010\uff9f\020\uff9f\021\uff9f\025" +
    "\uff9f\027\uff9f\043\uff9f\044\uff9f\001\002\000\020\010\uff9d" +
    "\020\uff9d\021\uff9d\025\uff9d\027\uff9d\043\uff9d\044\uff9d\001" +
    "\002\000\020\010\uff9a\020\uff9a\021\uff9a\025\uff9a\027\uff9a" +
    "\043\uff9a\044\uff9a\001\002\000\020\010\uff9e\020\uff9e\021" +
    "\uff9e\025\uff9e\027\uff9e\043\uff9e\044\uff9e\001\002\000\020" +
    "\010\112\020\114\021\071\025\120\027\115\043\107\044" +
    "\111\001\002\000\020\010\uff9c\020\uff9c\021\uff9c\025\uff9c" +
    "\027\uff9c\043\uff9c\044\uff9c\001\002\000\010\011\uffb6\037" +
    "\uffb6\040\uffb6\001\002\000\004\007\uffc6\001\002\000\004" +
    "\007\233\001\002\000\004\007\uffc5\001\002\000\020\010" +
    "\112\020\114\021\071\025\120\027\115\043\107\044\111" +
    "\001\002\000\022\010\112\011\uffc3\020\114\021\071\025" +
    "\120\027\115\043\107\044\111\001\002\000\004\011\231" +
    "\001\002\000\004\007\uffc7\001\002\000\004\007\uffc8\001" +
    "\002\000\026\005\uffd1\006\uffd1\013\uffd1\014\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\034\uffd1\035\uffd1\036\uffd1\001\002\000" +
    "\060\007\uffa4\010\uffa4\011\uffa4\012\uffa4\015\uffa4\016\uffa4" +
    "\030\236\031\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\045\237\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\001\002\000\060\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\015\uffa3\016\uffa3\030\uffa3" +
    "\031\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\001\002\000\020\010\112\020" +
    "\114\021\071\025\120\027\115\043\107\044\111\001\002" +
    "\000\004\021\240\001\002\000\060\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\015\uffa1\016\uffa1\030\uffa1\031\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\001\002\000\004\031\242\001\002\000\060\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\015\uffa0\016\uffa0\030\uffa0" +
    "\031\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\055\uffa0\056\uffa0\001\002\000\020\010\112\020" +
    "\114\021\071\025\120\027\115\043\107\044\111\001\002" +
    "\000\004\011\245\001\002\000\022\005\103\013\077\014" +
    "\101\021\071\022\074\034\070\035\102\036\067\001\002" +
    "\000\024\005\uffd4\006\uffd4\013\uffd4\014\uffd4\021\uffd4\022" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\001\002\000\004\021\071" +
    "\001\002\000\004\011\251\001\002\000\004\007\252\001" +
    "\002\000\026\005\uffcf\006\uffcf\013\uffcf\014\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\034\uffcf\035\uffcf\036\uffcf\001\002\000" +
    "\010\011\uffe8\012\uffe8\030\254\001\002\000\004\031\264" +
    "\001\002\000\006\011\uffdb\012\uffdb\001\002\000\006\011" +
    "\uffde\012\260\001\002\000\006\011\uffdc\012\uffdc\001\002" +
    "\000\004\021\022\001\002\000\004\021\262\001\002\000" +
    "\010\011\uffe8\012\uffe8\030\254\001\002\000\006\011\uffda" +
    "\012\uffda\001\002\000\010\007\uffe9\011\uffe9\012\uffe9\001" +
    "\002\000\014\003\uffe6\005\uffe6\021\uffe6\024\uffe6\032\uffe6" +
    "\001\002\000\004\005\267\001\002\000\010\005\uffef\006" +
    "\uffef\021\uffef\001\002\000\010\005\272\006\271\021\uffee" +
    "\001\002\000\014\003\uffe5\005\uffe5\021\uffe5\024\uffe5\032" +
    "\uffe5\001\002\000\010\006\uffe2\017\uffe2\021\uffe2\001\002" +
    "\000\010\006\274\017\056\021\022\001\002\000\004\006" +
    "\275\001\002\000\014\003\uffe4\005\uffe4\021\uffe4\024\uffe4" +
    "\032\uffe4\001\002\000\010\006\277\017\056\021\022\001" +
    "\002\000\004\002\001\001\002\000\006\007\301\012\035" +
    "\001\002\000\014\003\ufff9\005\ufff9\021\ufff9\024\ufff9\032" +
    "\ufff9\001\002\000\004\021\303\001\002\000\010\007\uffe8" +
    "\012\uffe8\030\254\001\002\000\006\007\uffeb\012\uffeb\001" +
    "\002\000\006\007\307\012\310\001\002\000\006\007\uffec" +
    "\012\uffec\001\002\000\016\003\uffed\005\uffed\006\uffed\021" +
    "\uffed\024\uffed\032\uffed\001\002\000\004\021\311\001\002" +
    "\000\010\007\uffe8\012\uffe8\030\254\001\002\000\006\007" +
    "\uffea\012\uffea\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\006\001\001\000\014\005\012" +
    "\027\007\030\014\031\011\062\010\001\001\000\002\001" +
    "\001\000\004\006\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\277\001\001\000\002\001\001\000" +
    "\004\004\275\001\001\000\002\001\001\000\004\006\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\265\001\001\000\004\003" +
    "\044\001\001\000\006\005\046\062\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\050\001\001\000" +
    "\010\006\052\007\054\035\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\060\010\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\063\001\001\000\006\005\046\062\010\001\001\000\004" +
    "\014\065\001\001\000\012\013\075\015\072\020\077\021" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\233\001\001\000\002\001\001\000\004\022\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\116\015" +
    "\112\016\107\017\115\001\001\000\002\001\001\000\004" +
    "\014\103\001\001\000\012\013\075\015\072\020\077\021" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\116\015\112\017\155\001\001\000\002\001\001\000" +
    "\004\006\150\001\001\000\012\012\116\015\112\016\146" +
    "\017\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\130\001\001\000\004\055\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\124\057\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\127\015" +
    "\112\001\001\000\002\001\001\000\006\011\134\054\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\116\015\112\017\135\001\001\000\002" +
    "\001\001\000\014\012\116\015\112\016\137\017\115\041" +
    "\140\001\001\000\004\042\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\143\001\001\000\002\001" +
    "\001\000\012\012\116\015\112\016\145\017\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\116\015\112\016\152\017\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\156\001\001\000\006\011\134\054\132" +
    "\001\001\000\012\012\116\015\112\016\160\017\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\116\015\112\016\170\017\115" +
    "\040\171\043\173\047\172\001\001\000\004\052\217\001" +
    "\001\000\002\001\001\000\004\050\200\001\001\000\004" +
    "\045\174\001\001\000\004\046\175\001\001\000\002\001" +
    "\001\000\016\012\116\015\112\016\170\017\115\043\177" +
    "\047\172\001\001\000\002\001\001\000\004\051\201\001" +
    "\001\000\002\001\001\000\014\012\116\015\112\016\170" +
    "\017\115\047\203\001\001\000\002\001\001\000\012\013" +
    "\205\015\072\020\206\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\072\020\211\021\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\116\015\112\016\221\017\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\116" +
    "\015\112\016\231\017\115\001\001\000\014\012\116\015" +
    "\112\016\137\017\115\041\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\234\001\001\000\002\001\001\000\012\012\116" +
    "\015\112\016\240\017\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\116\015\112\016\170\017\115\040\243\043\173\047" +
    "\172\001\001\000\002\001\001\000\012\013\245\015\072" +
    "\020\077\021\071\001\001\000\002\001\001\000\004\015" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\254\001\001\000\002\001\001\000" +
    "\004\036\255\001\001\000\004\037\256\001\001\000\002" +
    "\001\001\000\004\006\260\001\001\000\002\001\001\000" +
    "\004\032\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\267\001" +
    "\001\000\006\005\046\062\010\001\001\000\002\001\001" +
    "\000\004\004\272\001\001\000\010\006\052\007\054\035" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\052\007\054\035\053\001\001\000\002\001\001\000" +
    "\004\026\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\303\001\001\000\004\033\304\001\001\000" +
    "\004\034\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\311\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
	 {
		if(s.value.toString().equals("char") && Kontekst.globalna())dekChar++;
		Kontekst.push(s);
		System.out.println(s.toString() + " " + s.value.toString());
		
	}
	return s;

    }


	
	
	
	
	//Logger log = Logger.getLogger(getClass());
	
	int dekChar = 0;
	int dekGlobNizova = 0;
	int defFunkcijaUProgramu= 0;
	int defUnutrasnjihKlasa = 0;
	int blokoviNaredbi = 0;
	int pozivFunkcijaUMain =0;
	int brojNewNaredbi =0;
	int defMetodaUnutrasnjihKlasa =0;
	int dekPoljaUnutrasnjihKlasa =0;
	int brojIzvodjenja =0;
	
	String greska="Neka greska";
	
	
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
 
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska"+"("+greska+")", cur_token);
        
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        //log.error(msg.toString());
        System.out.println(msg.toString());
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Mulop ::= PROCENAT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Mulop ::= PODELJENO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Mulop ::= PUTA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Relop ::= MANJE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Relop ::= MANJE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Relop ::= VECE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Relop ::= VECE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Relop ::= UZVICNIK_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Relop ::= JEDNAKO_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Des ::= O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Des ::= TACKA IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DesList ::= DesList Des 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Designator ::= IDENT DesList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Factor ::= O_ZAG Expr Z_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Factor ::= NEW Type O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Factor ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Factor ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= Designator O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MulFac ::= Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFac",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MulFacList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MulFacList ::= MulFacList MulFac 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Term ::= Factor MulFacList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AddTerm ::= Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AddTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AddTermList ::= AddTermList AddTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= MINUS Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Fact ::= I CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Fact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FactList ::= FactList Fact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CondTerm ::= CondFact FactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Cond ::= ILI CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Cond",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CondList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CondList ::= CondList Cond 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condition ::= CondTerm CondList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Act ::= ZAREZ Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Act",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ActList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ActList ::= ActList Act 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ActPars ::= Expr ActList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Something ::= MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Something ::= PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Something ::= O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Something ::= JEDNAKO Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Matched ::= RETURN TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matched ::= RETURN Expr TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matched ::= O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.blokoviNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= PRINT O_ZAG Expr ZAREZ NUMBER Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= PRINT O_ZAG Expr Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matched ::= READ O_ZAG Designator Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matched ::= BREAK TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matched ::= Designator Something TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Unmatched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Unmatched ::= IF O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= WHILE O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormParamDec ::= ZAREZ Type IDENT Niz 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDec",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormParamDecList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormParamDecList ::= FormParamDecList FormParamDec 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormPars ::= Type IDENT Niz FormParamDecList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Prefix ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Prefix ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDecl ::= Prefix IDENT O_ZAG FormPars Z_ZAG VarDeclList O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.defMetodaUnutrasnjihKlasa++;  parser.defFunkcijaUProgramu++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++;parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Niz ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Niz ::= O_UGL_ZAG Z_UGL_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.globalna())parser.dekGlobNizova++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Id ::= ZAREZ IDENT Niz 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Id",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IdList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IdList ::= IdList Id 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= NT$0 Type IDENT Niz IdList TACKA_ZAREZ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Val ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Val ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Val ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Val ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AssignVal ::= ZAREZ error 
            {
              Object RESULT =null;
		parser.greska="nepravilna definicija globalne promenljive"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignVal",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AssignVal ::= ZAREZ IDENT JEDNAKO Val 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignVal",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AssignValList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AssignValList ::= AssignValList AssignVal 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= error AssignValList TACKA_ZAREZ 
            {
              Object RESULT =null;
		parser.greska="nepravilna definicija globalne promenljive"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type IDENT JEDNAKO Val AssignValList TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM IDENT DeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

