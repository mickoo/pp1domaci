
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 04 14:16:42 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 04 14:16:42 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\010\000\002\002\004\000\002\062" +
    "\003\000\002\023\004\000\002\023\002\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\011\000" +
    "\002\030\005\000\002\025\004\000\002\025\002\000\002" +
    "\026\006\000\002\026\004\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\003\004" +
    "\000\002\003\002\000\002\063\002\000\002\005\010\000" +
    "\002\033\004\000\002\033\002\000\002\034\005\000\002" +
    "\032\004\000\002\032\002\000\002\006\003\000\002\031" +
    "\007\000\002\031\012\000\002\031\011\000\002\031\014" +
    "\000\002\031\010\000\002\031\013\000\002\031\010\000" +
    "\002\031\013\000\002\031\007\000\002\031\012\000\002" +
    "\031\011\000\002\031\014\000\002\004\004\000\002\004" +
    "\002\000\002\007\013\000\002\007\013\000\002\007\013" +
    "\000\002\035\003\000\002\035\003\000\002\010\006\000" +
    "\002\010\002\000\002\036\004\000\002\036\002\000\002" +
    "\037\006\000\002\037\004\000\002\014\004\000\002\014" +
    "\002\000\002\013\003\000\002\013\003\000\002\013\007" +
    "\000\002\013\007\000\002\021\007\000\002\021\011\000" +
    "\002\021\007\000\002\021\011\000\002\020\004\000\002" +
    "\020\004\000\002\020\007\000\002\020\007\000\002\020" +
    "\011\000\002\020\005\000\002\020\005\000\002\020\004" +
    "\000\002\020\011\000\002\020\011\000\002\022\005\000" +
    "\002\022\005\000\002\022\006\000\002\022\004\000\002" +
    "\022\005\000\002\022\004\000\002\022\004\000\002\041" +
    "\004\000\002\041\002\000\002\042\004\000\002\042\002" +
    "\000\002\044\004\000\002\040\004\000\002\045\004\000" +
    "\002\045\002\000\002\046\004\000\002\043\004\000\002" +
    "\050\004\000\002\050\002\000\002\051\004\000\002\047" +
    "\003\000\002\047\005\000\002\016\004\000\002\016\005" +
    "\000\002\053\004\000\002\053\002\000\002\054\004\000" +
    "\002\017\004\000\002\055\004\000\002\055\002\000\002" +
    "\056\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\006\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\007\000\002\012\005\000\002\015\004\000" +
    "\002\060\004\000\002\060\002\000\002\061\004\000\002" +
    "\061\005\000\002\061\005\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\011\003\000\002\011\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\004\005\001\002\000\004\002\u0101\001" +
    "\002\000\004\021\006\001\002\000\014\003\uffff\005\uffff" +
    "\021\uffff\024\uffff\032\uffff\001\002\000\014\003\ufffd\005" +
    "\ufffd\021\ufffd\024\ufffd\032\ufffd\001\002\000\014\003\015" +
    "\005\017\021\uffed\024\021\032\020\001\002\000\014\003" +
    "\ufffe\005\ufffe\021\ufffe\024\ufffe\032\ufffe\001\002\000\004" +
    "\021\023\001\002\000\014\003\ufffb\005\ufffb\021\ufffb\024" +
    "\ufffb\032\ufffb\001\002\000\014\003\ufffa\005\ufffa\021\ufffa" +
    "\024\ufffa\032\ufffa\001\002\000\006\007\ufff6\012\ufff6\001" +
    "\002\000\014\003\ufffc\005\ufffc\021\ufffc\024\ufffc\032\ufffc" +
    "\001\002\000\010\006\uffd8\017\uffd8\021\uffd8\001\002\000" +
    "\004\021\043\001\002\000\004\021\023\001\002\000\004" +
    "\021\024\001\002\000\052\005\uffe6\007\uffe6\011\uffe6\012" +
    "\uffe6\015\uffe6\021\uffe6\030\uffe6\031\uffe6\037\uffe6\040\uffe6" +
    "\043\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\004\016\025" +
    "\001\002\000\012\020\027\025\032\026\026\027\031\001" +
    "\002\000\006\007\ufff1\012\ufff1\001\002\000\006\007\ufff3" +
    "\012\ufff3\001\002\000\006\007\ufff6\012\ufff6\001\002\000" +
    "\006\007\ufff0\012\ufff0\001\002\000\006\007\ufff2\012\ufff2" +
    "\001\002\000\006\007\034\012\036\001\002\000\014\003" +
    "\ufff9\005\ufff9\021\ufff9\024\ufff9\032\ufff9\001\002\000\006" +
    "\007\ufff7\012\ufff7\001\002\000\006\003\037\021\040\001" +
    "\002\000\006\007\ufff4\012\ufff4\001\002\000\004\016\041" +
    "\001\002\000\012\020\027\025\032\026\026\027\031\001" +
    "\002\000\006\007\ufff5\012\ufff5\001\002\000\010\003\045" +
    "\005\046\033\044\001\002\000\004\021\023\001\002\000" +
    "\004\005\331\001\002\000\012\003\050\005\uffee\006\uffee" +
    "\021\uffee\001\002\000\010\005\325\006\324\021\uffed\001" +
    "\002\000\006\005\052\006\051\001\002\000\014\003\uffdd" +
    "\005\uffdd\021\uffdd\024\uffdd\032\uffdd\001\002\000\010\006" +
    "\uffd8\017\uffd8\021\uffd8\001\002\000\010\006\054\017\060" +
    "\021\023\001\002\000\004\006\323\001\002\000\004\021" +
    "\uffd4\001\002\000\004\021\061\001\002\000\010\006\uffd9" +
    "\017\uffd9\021\uffd9\001\002\000\004\021\uffd3\001\002\000" +
    "\004\010\062\001\002\000\010\003\064\011\uffd1\021\023" +
    "\001\002\000\004\021\310\001\002\000\004\011\303\001" +
    "\002\000\004\011\066\001\002\000\010\003\070\005\uffee" +
    "\021\uffee\001\002\000\006\005\300\021\uffed\001\002\000" +
    "\004\005\071\001\002\000\026\003\uffcb\005\uffcb\006\uffcb" +
    "\013\uffcb\014\uffcb\021\uffcb\022\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\001\002\000\026\003\103\005\111\006\101\013\104" +
    "\014\106\021\075\022\100\034\074\035\110\036\073\001" +
    "\002\000\004\010\273\001\002\000\004\010\264\001\002" +
    "\000\060\007\uff8f\010\uff8f\011\uff8f\012\uff8f\015\uff8f\016" +
    "\uff8f\030\uff8f\031\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\001\002\000\026" +
    "\003\uffc9\005\uffc9\006\uffc9\013\uffc9\014\uffc9\021\uffc9\022" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\001\002\000\012\010\245" +
    "\016\244\041\242\042\243\001\002\000\004\010\200\001" +
    "\002\000\010\006\uffd6\017\uffd6\021\uffd6\001\002\000\026" +
    "\003\uffcc\005\uffcc\006\uffcc\013\uffcc\014\uffcc\021\uffcc\022" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\001\002\000\004\011\177" +
    "\001\002\000\004\010\167\001\002\000\026\003\uffca\005" +
    "\uffca\006\uffca\013\uffca\014\uffca\021\uffca\022\uffca\034\uffca" +
    "\035\uffca\036\uffca\001\002\000\022\007\130\010\121\020" +
    "\123\021\075\025\126\027\124\043\116\044\120\001\002" +
    "\000\004\007\115\001\002\000\004\007\114\001\002\000" +
    "\026\003\uffcb\005\uffcb\006\uffcb\013\uffcb\014\uffcb\021\uffcb" +
    "\022\uffcb\034\uffcb\035\uffcb\036\uffcb\001\002\000\026\003" +
    "\103\005\111\006\113\013\104\014\106\021\075\022\100" +
    "\034\074\035\110\036\073\001\002\000\030\003\uffbd\005" +
    "\uffbd\006\uffbd\013\uffbd\014\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\001\002\000\030\003\uffc1\005" +
    "\uffc1\006\uffc1\013\uffc1\014\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\001\002\000\030\003\uffc2\005" +
    "\uffc2\006\uffc2\013\uffc2\014\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\001\002\000\016\010\121\020" +
    "\123\021\075\025\126\027\124\044\120\001\002\000\004" +
    "\007\164\001\002\000\004\021\023\001\002\000\020\010" +
    "\121\020\123\021\075\025\126\027\124\043\116\044\120" +
    "\001\002\000\046\007\uff98\010\146\011\uff98\012\uff98\015" +
    "\uff98\031\uff98\037\uff98\040\uff98\043\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\001\002\000\044\007\uff99\011\uff99\012\uff99\015\uff99" +
    "\031\uff99\037\uff99\040\uff99\043\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\001\002\000\044\007\uff95\011\uff95\012\uff95\015\uff95\031" +
    "\uff95\037\uff95\040\uff95\043\uff95\046\uff95\047\uff95\050\uff95" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\001" +
    "\002\000\036\007\uff9f\011\uff9f\012\uff9f\015\uff9f\031\uff9f" +
    "\037\uff9f\040\uff9f\043\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\056\uff9f\001\002\000\044\007\uff96\011\uff96" +
    "\012\uff96\015\uff96\031\uff96\037\uff96\040\uff96\043\uff96\046" +
    "\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\001\002\000\044\007\uff9b\011\uff9b\012" +
    "\uff9b\015\uff9b\031\uff9b\037\uff9b\040\uff9b\043\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\056\uff9b\001\002\000\030\003\uffbb\005\uffbb\006\uffbb" +
    "\013\uffbb\014\uffbb\021\uffbb\022\uffbb\023\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\001\002\000\044\007\uff9d\011\uff9d\012\uff9d" +
    "\015\uff9d\031\uff9d\037\uff9d\040\uff9d\043\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\132\054\133\055\134" +
    "\056\uff9d\001\002\000\016\010\uff83\020\uff83\021\uff83\025" +
    "\uff83\027\uff83\044\uff83\001\002\000\016\010\uff82\020\uff82" +
    "\021\uff82\025\uff82\027\uff82\044\uff82\001\002\000\016\010" +
    "\uff81\020\uff81\021\uff81\025\uff81\027\uff81\044\uff81\001\002" +
    "\000\044\007\uff9c\011\uff9c\012\uff9c\015\uff9c\031\uff9c\037" +
    "\uff9c\040\uff9c\043\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002\000" +
    "\016\010\121\020\123\021\075\025\126\027\124\044\120" +
    "\001\002\000\044\007\uff9a\011\uff9a\012\uff9a\015\uff9a\031" +
    "\uff9a\037\uff9a\040\uff9a\043\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001" +
    "\002\000\036\007\uffa2\011\uffa2\012\uffa2\015\141\031\uffa2" +
    "\037\uffa2\040\uffa2\043\143\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\056\uffa2\001\002\000\016\010\uff85\020\uff85" +
    "\021\uff85\025\uff85\027\uff85\044\uff85\001\002\000\036\007" +
    "\uffa0\011\uffa0\012\uffa0\015\uffa0\031\uffa0\037\uffa0\040\uffa0" +
    "\043\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\056" +
    "\uffa0\001\002\000\016\010\uff84\020\uff84\021\uff84\025\uff84" +
    "\027\uff84\044\uff84\001\002\000\016\010\121\020\123\021" +
    "\075\025\126\027\124\044\120\001\002\000\036\007\uff9e" +
    "\011\uff9e\012\uff9e\015\uff9e\031\uff9e\037\uff9e\040\uff9e\043" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\056\uff9e" +
    "\001\002\000\022\010\121\011\uffb0\020\123\021\075\025" +
    "\126\027\124\043\116\044\120\001\002\000\006\011\uffae" +
    "\012\uffae\001\002\000\004\011\151\001\002\000\044\007" +
    "\uff97\011\uff97\012\uff97\015\uff97\031\uff97\037\uff97\040\uff97" +
    "\043\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\056\uff97\001\002\000\006\011\uffb1" +
    "\012\154\001\002\000\006\011\uffaf\012\uffaf\001\002\000" +
    "\020\010\121\020\123\021\075\025\126\027\124\043\116" +
    "\044\120\001\002\000\006\011\uffad\012\uffad\001\002\000" +
    "\004\011\157\001\002\000\044\007\uff92\011\uff92\012\uff92" +
    "\015\uff92\031\uff92\037\uff92\040\uff92\043\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\001\002\000\046\007\uff94\011\uff94\012\uff94\015" +
    "\uff94\030\161\031\uff94\037\uff94\040\uff94\043\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\001\002\000\020\010\121\020\123\021\075" +
    "\025\126\027\124\043\116\044\120\001\002\000\004\031" +
    "\163\001\002\000\044\007\uff93\011\uff93\012\uff93\015\uff93" +
    "\031\uff93\037\uff93\040\uff93\043\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\001\002\000\030\003\uffbc\005\uffbc\006\uffbc\013\uffbc\014" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\001\002\000\036\007\uff9f\011\uff9f\012\uff9f\015\uff9f\031" +
    "\uff9f\037\uff9f\040\uff9f\043\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\056\uff9f\001\002\000\036\007\uffa1\011" +
    "\uffa1\012\uffa1\015\141\031\uffa1\037\uffa1\040\uffa1\043\143" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\056\uffa1\001" +
    "\002\000\020\010\121\020\123\021\075\025\126\027\124" +
    "\043\116\044\120\001\002\000\006\011\171\012\172\001" +
    "\002\000\004\007\176\001\002\000\004\020\173\001\002" +
    "\000\004\011\174\001\002\000\004\007\175\001\002\000" +
    "\030\003\uffbe\005\uffbe\006\uffbe\013\uffbe\014\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\034\uffbe\035\uffbe\036\uffbe\001\002\000" +
    "\030\003\uffbf\005\uffbf\006\uffbf\013\uffbf\014\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\034\uffbf\035\uffbf\036\uffbf\001\002\000" +
    "\004\007\uffb5\001\002\000\022\003\204\010\121\020\123" +
    "\021\075\025\126\027\124\043\116\044\120\001\002\000" +
    "\024\011\uffa4\037\uffa4\040\uffa4\046\233\047\232\050\234" +
    "\051\237\052\235\056\236\001\002\000\004\011\224\001" +
    "\002\000\010\011\uffa6\037\uffa6\040\uffa6\001\002\000\004" +
    "\011\212\001\002\000\006\011\uffaa\037\uffaa\001\002\000" +
    "\006\011\uffac\037\210\001\002\000\006\011\uffab\037\uffab" +
    "\001\002\000\020\010\121\020\123\021\075\025\126\027" +
    "\124\043\116\044\120\001\002\000\006\011\uffa9\037\uffa9" +
    "\001\002\000\024\003\103\005\111\013\104\014\106\021" +
    "\075\022\100\034\074\035\110\036\073\001\002\000\026" +
    "\003\uffc4\005\uffc4\006\uffc4\013\uffc4\014\uffc4\021\uffc4\022" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\001\002\000\030\003\uffca" +
    "\005\uffca\006\uffca\013\uffca\014\uffca\021\uffca\022\uffca\023" +
    "\215\034\uffca\035\uffca\036\uffca\001\002\000\022\003\103" +
    "\005\111\013\104\014\106\021\075\022\100\035\110\036" +
    "\073\001\002\000\026\003\uffc3\005\uffc3\006\uffc3\013\uffc3" +
    "\014\uffc3\021\uffc3\022\uffc3\034\uffc3\035\uffc3\036\uffc3\001" +
    "\002\000\030\003\uffb9\005\uffb9\006\uffb9\013\uffb9\014\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\034\uffb9\035\uffb9\036\uffb9\001" +
    "\002\000\010\011\uffa8\037\uffa8\040\222\001\002\000\010" +
    "\011\uffa7\037\uffa7\040\uffa7\001\002\000\020\010\121\020" +
    "\123\021\075\025\126\027\124\043\116\044\120\001\002" +
    "\000\010\011\uffa5\037\uffa5\040\uffa5\001\002\000\024\003" +
    "\103\005\111\013\104\014\106\021\075\022\100\034\074" +
    "\035\110\036\073\001\002\000\026\003\uffc6\005\uffc6\006" +
    "\uffc6\013\uffc6\014\uffc6\021\uffc6\022\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\001\002\000\030\003\uffca\005\uffca\006\uffca\013" +
    "\uffca\014\uffca\021\uffca\022\uffca\023\227\034\uffca\035\uffca" +
    "\036\uffca\001\002\000\022\003\103\005\111\013\104\014" +
    "\106\021\075\022\100\035\110\036\073\001\002\000\026" +
    "\003\uffc5\005\uffc5\006\uffc5\013\uffc5\014\uffc5\021\uffc5\022" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\001\002\000\030\003\uffba" +
    "\005\uffba\006\uffba\013\uffba\014\uffba\021\uffba\022\uffba\023" +
    "\uffba\034\uffba\035\uffba\036\uffba\001\002\000\020\010\uff87" +
    "\020\uff87\021\uff87\025\uff87\027\uff87\043\uff87\044\uff87\001" +
    "\002\000\020\010\uff8b\020\uff8b\021\uff8b\025\uff8b\027\uff8b" +
    "\043\uff8b\044\uff8b\001\002\000\020\010\uff89\020\uff89\021" +
    "\uff89\025\uff89\027\uff89\043\uff89\044\uff89\001\002\000\020" +
    "\010\uff86\020\uff86\021\uff86\025\uff86\027\uff86\043\uff86\044" +
    "\uff86\001\002\000\020\010\uff8a\020\uff8a\021\uff8a\025\uff8a" +
    "\027\uff8a\043\uff8a\044\uff8a\001\002\000\020\010\uff88\020" +
    "\uff88\021\uff88\025\uff88\027\uff88\043\uff88\044\uff88\001\002" +
    "\000\020\010\121\020\123\021\075\025\126\027\124\043" +
    "\116\044\120\001\002\000\010\011\uffa3\037\uffa3\040\uffa3" +
    "\001\002\000\004\007\uffb3\001\002\000\004\007\uffb2\001" +
    "\002\000\022\003\252\010\121\020\123\021\075\025\126" +
    "\027\124\043\116\044\120\001\002\000\024\003\247\010" +
    "\121\011\uffb0\020\123\021\075\025\126\027\124\043\116" +
    "\044\120\001\002\000\004\011\250\001\002\000\004\007" +
    "\uffb4\001\002\000\004\007\uffb6\001\002\000\004\007\uffb8" +
    "\001\002\000\004\007\uffb7\001\002\000\060\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\015\uff91\016\uff91\030\255\031\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\045\256\046" +
    "\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\001\002\000\060\007\uff90\010\uff90\011" +
    "\uff90\012\uff90\015\uff90\016\uff90\030\uff90\031\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\045\uff90\046\uff90\047" +
    "\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90" +
    "\056\uff90\001\002\000\022\003\261\010\121\020\123\021" +
    "\075\025\126\027\124\043\116\044\120\001\002\000\004" +
    "\021\257\001\002\000\060\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\015\uff8e\016\uff8e\030\uff8e\031\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\045\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e" +
    "\001\002\000\004\031\263\001\002\000\004\031\262\001" +
    "\002\000\060\007\uff8c\010\uff8c\011\uff8c\012\uff8c\015\uff8c" +
    "\016\uff8c\030\uff8c\031\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000" +
    "\060\007\uff8d\010\uff8d\011\uff8d\012\uff8d\015\uff8d\016\uff8d" +
    "\030\uff8d\031\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\001\002\000\022\003" +
    "\266\010\121\020\123\021\075\025\126\027\124\043\116" +
    "\044\120\001\002\000\004\011\271\001\002\000\004\011" +
    "\267\001\002\000\024\003\103\005\111\013\104\014\106" +
    "\021\075\022\100\034\074\035\110\036\073\001\002\000" +
    "\026\003\uffc7\005\uffc7\006\uffc7\013\uffc7\014\uffc7\021\uffc7" +
    "\022\uffc7\034\uffc7\035\uffc7\036\uffc7\001\002\000\024\003" +
    "\103\005\111\013\104\014\106\021\075\022\100\034\074" +
    "\035\110\036\073\001\002\000\026\003\uffc8\005\uffc8\006" +
    "\uffc8\013\uffc8\014\uffc8\021\uffc8\022\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\001\002\000\004\021\075\001\002\000\004\011" +
    "\275\001\002\000\004\007\276\001\002\000\030\003\uffc0" +
    "\005\uffc0\006\uffc0\013\uffc0\014\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\001\002\000\010\005\uffef" +
    "\006\uffef\021\uffef\001\002\000\026\003\uffcb\005\uffcb\006" +
    "\uffcb\013\uffcb\014\uffcb\021\uffcb\022\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\001\002\000\026\003\103\005\111\006\302\013" +
    "\104\014\106\021\075\022\100\034\074\035\110\036\073" +
    "\001\002\000\010\006\uffd7\017\uffd7\021\uffd7\001\002\000" +
    "\006\005\uffee\021\uffee\001\002\000\006\005\305\021\uffed" +
    "\001\002\000\026\003\uffcb\005\uffcb\006\uffcb\013\uffcb\014" +
    "\uffcb\021\uffcb\022\uffcb\034\uffcb\035\uffcb\036\uffcb\001\002" +
    "\000\026\003\103\005\111\006\307\013\104\014\106\021" +
    "\075\022\100\034\074\035\110\036\073\001\002\000\010" +
    "\006\uffd5\017\uffd5\021\uffd5\001\002\000\010\011\uffe7\012" +
    "\uffe7\030\311\001\002\000\004\031\322\001\002\000\006" +
    "\011\uffcf\012\uffcf\001\002\000\006\011\uffd2\012\315\001" +
    "\002\000\006\011\uffd0\012\uffd0\001\002\000\006\003\317" +
    "\021\023\001\002\000\004\021\320\001\002\000\006\011" +
    "\uffcd\012\uffcd\001\002\000\010\011\uffe7\012\uffe7\030\311" +
    "\001\002\000\006\011\uffce\012\uffce\001\002\000\010\007" +
    "\uffe8\011\uffe8\012\uffe8\001\002\000\014\003\uffdc\005\uffdc" +
    "\021\uffdc\024\uffdc\032\uffdc\001\002\000\014\003\uffe5\005" +
    "\uffe5\021\uffe5\024\uffe5\032\uffe5\001\002\000\010\006\uffd8" +
    "\017\uffd8\021\uffd8\001\002\000\010\006\327\017\060\021" +
    "\023\001\002\000\004\006\330\001\002\000\014\003\uffe4" +
    "\005\uffe4\021\uffe4\024\uffe4\032\uffe4\001\002\000\012\003" +
    "\333\005\uffee\006\uffee\021\uffee\001\002\000\010\005\342" +
    "\006\341\021\uffed\001\002\000\006\005\335\006\334\001" +
    "\002\000\014\003\uffdf\005\uffdf\021\uffdf\024\uffdf\032\uffdf" +
    "\001\002\000\010\006\uffd8\017\uffd8\021\uffd8\001\002\000" +
    "\010\006\337\017\060\021\023\001\002\000\004\006\340" +
    "\001\002\000\014\003\uffde\005\uffde\021\uffde\024\uffde\032" +
    "\uffde\001\002\000\014\003\uffe1\005\uffe1\021\uffe1\024\uffe1" +
    "\032\uffe1\001\002\000\010\006\uffd8\017\uffd8\021\uffd8\001" +
    "\002\000\010\006\344\017\060\021\023\001\002\000\004" +
    "\006\345\001\002\000\014\003\uffe0\005\uffe0\021\uffe0\024" +
    "\uffe0\032\uffe0\001\002\000\004\005\347\001\002\000\012" +
    "\003\351\005\uffee\006\uffee\021\uffee\001\002\000\010\005" +
    "\360\006\357\021\uffed\001\002\000\006\005\353\006\352" +
    "\001\002\000\014\003\uffdb\005\uffdb\021\uffdb\024\uffdb\032" +
    "\uffdb\001\002\000\010\006\uffd8\017\uffd8\021\uffd8\001\002" +
    "\000\010\006\355\017\060\021\023\001\002\000\004\006" +
    "\356\001\002\000\014\003\uffda\005\uffda\021\uffda\024\uffda" +
    "\032\uffda\001\002\000\014\003\uffe3\005\uffe3\021\uffe3\024" +
    "\uffe3\032\uffe3\001\002\000\010\006\uffd8\017\uffd8\021\uffd8" +
    "\001\002\000\010\006\362\017\060\021\023\001\002\000" +
    "\004\006\363\001\002\000\014\003\uffe2\005\uffe2\021\uffe2" +
    "\024\uffe2\032\uffe2\001\002\000\010\006\365\017\060\021" +
    "\023\001\002\000\004\002\001\001\002\000\006\007\367" +
    "\012\036\001\002\000\014\003\ufff8\005\ufff8\021\ufff8\024" +
    "\ufff8\032\ufff8\001\002\000\004\021\371\001\002\000\010" +
    "\007\uffe7\012\uffe7\030\311\001\002\000\006\007\uffea\012" +
    "\uffea\001\002\000\006\007\375\012\376\001\002\000\006" +
    "\007\uffeb\012\uffeb\001\002\000\016\003\uffec\005\uffec\006" +
    "\uffec\021\uffec\024\uffec\032\uffec\001\002\000\004\021\377" +
    "\001\002\000\010\007\uffe7\012\uffe7\030\311\001\002\000" +
    "\006\007\uffe9\012\uffe9\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\062\006\001\001\000\002\001\001\000\004\023\007" +
    "\001\001\000\014\005\012\027\010\030\015\031\013\063" +
    "\011\001\001\000\002\001\001\000\004\006\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\365\001" +
    "\001\000\002\001\001\000\004\004\363\001\001\000\002" +
    "\001\001\000\004\006\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\345\001\001\000\002\001\001\000\004\003\046\001\001" +
    "\000\006\005\276\063\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\052\001\001\000\010\006\054" +
    "\007\056\035\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\062\010\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\066\001\001\000\006\005\276\063\011\001\001\000" +
    "\002\001\001\000\004\014\071\001\001\000\014\013\101" +
    "\015\076\020\104\021\075\022\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\126\015\121\016\116\017" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\111\001\001\000\014\013\101\015\076\020\104\021" +
    "\075\022\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\126\015\121\017\164\001" +
    "\001\000\002\001\001\000\004\006\157\001\001\000\012" +
    "\012\126\015\121\016\155\017\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\137" +
    "\001\001\000\002\001\001\000\004\055\130\001\001\000" +
    "\002\001\001\000\006\056\134\057\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\136\015\121\001\001\000\002\001\001" +
    "\000\006\011\143\054\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\126\015\121" +
    "\017\144\001\001\000\002\001\001\000\014\012\126\015" +
    "\121\016\146\017\124\041\147\001\001\000\004\042\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\152\001\001\000\002\001\001\000\012\012\126\015\121" +
    "\016\154\017\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\126" +
    "\015\121\016\161\017\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\165\001\001" +
    "\000\006\011\143\054\141\001\001\000\012\012\126\015" +
    "\121\016\167\017\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\126\015\121\016\200\017\124\040\201\043" +
    "\204\047\202\001\001\000\004\052\237\001\001\000\002" +
    "\001\001\000\004\050\217\001\001\000\002\001\001\000" +
    "\004\045\205\001\001\000\004\046\206\001\001\000\002" +
    "\001\001\000\016\012\126\015\121\016\200\017\124\043" +
    "\210\047\202\001\001\000\002\001\001\000\014\013\212" +
    "\015\076\020\213\021\075\022\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\076\020\216\021\215" +
    "\022\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\220\001\001\000\002\001\001\000\014\012\126" +
    "\015\121\016\200\017\124\047\222\001\001\000\002\001" +
    "\001\000\014\013\224\015\076\020\225\021\075\022\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\076\020\230\021\227\022\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\126\015\121\016\240\017\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\126\015\121\016\250\017\124\001\001\000" +
    "\014\012\126\015\121\016\146\017\124\041\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\253\001\001" +
    "\000\002\001\001\000\012\012\126\015\121\016\257\017" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\126\015\121\016\200\017\124\040\264" +
    "\043\204\047\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\267\015\076\020\104\021\075\022\106" +
    "\001\001\000\002\001\001\000\014\013\271\015\076\020" +
    "\104\021\075\022\106\001\001\000\002\001\001\000\004" +
    "\015\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\300\001\001" +
    "\000\014\013\101\015\076\020\104\021\075\022\106\001" +
    "\001\000\002\001\001\000\004\003\303\001\001\000\006" +
    "\005\276\063\011\001\001\000\004\014\305\001\001\000" +
    "\014\013\101\015\076\020\104\021\075\022\106\001\001" +
    "\000\002\001\001\000\004\032\311\001\001\000\002\001" +
    "\001\000\004\036\312\001\001\000\004\037\313\001\001" +
    "\000\002\001\001\000\004\006\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\325\001\001\000\010\006\054\007\056" +
    "\035\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\331\001\001\000\006\005\276\063\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\335\001" +
    "\001\000\010\006\054\007\056\035\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\342\001\001\000\010\006\054\007\056\035\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\347\001\001\000\006\005\276\063\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\353\001" +
    "\001\000\010\006\054\007\056\035\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\360\001\001\000\010\006\054\007\056\035\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\054\007" +
    "\056\035\055\001\001\000\002\001\001\000\004\026\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\371\001\001\000\004\033\372\001\001\000\004\034\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\377\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 

	Tab.init();
	
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
	 {
		if(s.value.toString().equals("char") && Kontekst.globalna())dekChar++;
		Kontekst.push(s);
		System.out.println(s.toString() + " " + s.value.toString());
		
	}
	return s;

    }


	
	
	
	
	//Logger log = Logger.getLogger(getClass());
	
	int dekChar = 0;
	int dekGlobNizova = 0;
	int defFunkcijaUProgramu= 0;
	int defUnutrasnjihKlasa = 0;
	int blokoviNaredbi = 0;
	int pozivFunkcijaUMain =0;
	int brojNewNaredbi =0;
	int defMetodaUnutrasnjihKlasa =0;
	int dekPoljaUnutrasnjihKlasa =0;
	int brojIzvodjenja =0;
	
	
	
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
 
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
        
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        //log.error(msg.toString());
        System.out.println(msg.toString());
    }
    
     public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        
        System.out.println(msg.toString());
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {

 boolean jesteNiz=false; 
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Mulop ::= PROCENAT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Mulop ::= PODELJENO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Mulop ::= PUTA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= MANJE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= MANJE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= VECE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= VECE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= UZVICNIK_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= JEDNAKO_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Des ::= O_UGL_ZAG error Z_UGL_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Des ::= O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Des ::= TACKA IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DesList ::= DesList Des 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Designator ::= IDENT DesList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= O_ZAG Expr Z_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= NEW Type O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= Designator O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MulFac ::= Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFac",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MulFacList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MulFacList ::= MulFacList MulFac 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Term ::= Factor MulFacList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AddTerm ::= Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AddTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AddTermList ::= AddTermList AddTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= MINUS Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Fact ::= I CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Fact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FactList ::= FactList Fact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondTerm ::= CondFact FactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Cond ::= ILI CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Cond",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondList ::= CondList Cond 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= CondTerm CondList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Act ::= ZAREZ Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Act",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ActList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ActList ::= ActList Act 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ActPars ::= Expr ActList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Something ::= Designator MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Something ::= Designator PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Something ::= Designator O_ZAG error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Something ::= error Z_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Something ::= Designator O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Something ::= Designator JEDNAKO error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Something ::= Designator JEDNAKO Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= IF O_ZAG error Z_ZAG Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= RETURN TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= RETURN Expr TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.blokoviNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= PRINT O_ZAG Expr ZAREZ NUMBER Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= PRINT O_ZAG Expr Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= READ O_ZAG Designator Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= BREAK TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= Something TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Unmatched ::= IF O_ZAG error Z_ZAG Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Unmatched ::= IF O_ZAG error Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Unmatched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Unmatched ::= IF O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= WHILE O_ZAG error Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= WHILE O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParamDec ::= ZAREZ error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDec",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParamDec ::= ZAREZ Type IDENT Niz 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDec",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParamDecList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParamDecList ::= FormParamDecList FormParamDec 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormPars ::= Type IDENT Niz FormParamDecList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prefix ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prefix ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= Prefix IDENT O_ZAG error Z_ZAG VarDeclList O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDecl ::= Prefix IDENT O_ZAG FormPars Z_ZAG error O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDecl ::= Prefix IDENT O_ZAG FormPars Z_ZAG VarDeclList O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.defMetodaUnutrasnjihKlasa++;  parser.defFunkcijaUProgramu++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG error O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG error Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassDecl ::= CLASS IDENT O_VIT_ZAG error O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassDecl ::= CLASS IDENT O_VIT_ZAG error Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDecl ::= CLASS IDENT error O_VIT_ZAG error O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl ::= CLASS IDENT error O_VIT_ZAG error Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl ::= CLASS IDENT error O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl ::= CLASS IDENT error O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++;parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Niz ::= 
            {
              Object RESULT =null;
		jesteNiz=false;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Niz ::= O_UGL_ZAG Z_UGL_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.globalna())parser.dekGlobNizova++; jesteNiz=true;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Id ::= ZAREZ IDENT Niz 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Id",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IdList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IdList ::= IdList Id 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= NT$0 Type IDENT Niz IdList TACKA_ZAREZ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Val ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Val ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Val ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Val ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AssignVal ::= ZAREZ error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignVal",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AssignVal ::= ZAREZ IDENT JEDNAKO Val 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignVal",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AssignValList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AssignValList ::= AssignValList AssignVal 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= error AssignValList TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST Type IDENT JEDNAKO Val AssignValList TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog , pName,Tab.noType);
	Tab.openScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgName DeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Tab.chainLocalSymbols(p);
	Tab.closeScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

