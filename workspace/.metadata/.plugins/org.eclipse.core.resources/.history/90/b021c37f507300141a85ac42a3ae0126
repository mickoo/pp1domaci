package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;


parser code {:
	
	
	
	//Logger log = Logger.getLogger(getClass());
	
	int printCallCount = 0;
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
 
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
        
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        //log.error(msg.toString());
        System.out.println(msg.toString());
    }



:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		//log.info(s.toString() + " " + s.value.toString());
		System.out.println(s.toString() + " " + s.value.toString() );
	return s;
:}


terminal PROGRAM , O_VIT_ZAG, Z_VIT_ZAG,TACKA_ZAREZ, O_ZAG, Z_ZAG, ZAREZ,PRINT,RETURN,PLUS,JEDNAKO,VOID;
terminal Integer NUMBER ;
terminal String IDENT;
terminal IF , ELSE;

non terminal Program, VarDeclList, MethodDeclList,VarDecl,Type,MethodDecl,FormalParamList;
non terminal FormalParamDecl,FormPars,Addop,Factor,ActualPars,ActualParamList;
non terminal Statement,StatementList,Designator,Expr,Term;



Program ::= PROGRAM IDENT VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG;

VarDeclList ::= VarDeclList VarDecl
				|
				/*epsilon*/
				;
				
VarDecl ::= Type IDENT TACKA_ZAREZ ;

Type ::= IDENT ;

MethodDeclList ::= MethodDeclList MethodDecl
				|
				/*epsilon*/
				;

MethodDecl ::= Type IDENT O_ZAG FormPars Z_ZAG VarDeclList O_VIT_ZAG StatementList Z_VIT_ZAG ;

FormPars ::= FormalParamList 	
			|
			/*epsilon*/
			;
			

FormalParamList ::= FormalParamList ZAREZ FormalParamDecl
					|
					FormalParamDecl
					;
					
FormalParamDecl ::= Type IDENT ;

StatementList ::= StatementList Statement
				|
				/*epsilon*/
				;

Statement ::= Matched | Unmatched;

Unmatched ::= IF Expr Statement | IF Expr Matched ELSE Unmached;

Matched ::= Designator JEDNAKO Expr TACKA_ZAREZ
			|
			Designator JEDNAKO error TACKA_ZAREZ
			|
			PRINT O_ZAG Expr Z_ZAG TACKA_ZAREZ {: parser.printCallCount++; :}
			|
			RETURN Expr TACKA_ZAREZ
			|
			RETURN TACKA_ZAREZ
			|
			IF Expr Matched ELSE Matched
			
			;				

Expr ::= Expr Addop Term
		|
		Term
		;
Term ::= Factor;

Factor ::= NUMBER
		|
		Designator 
		|
		Designator O_ZAG ActualPars Z_ZAG
		;

ActualPars ::= ActualParamList
			|
			/*epsilon*/
			;

ActualParamList ::= ActualParamList ZAREZ Expr
					|
					Expr
					;
Designator ::=IDENT;

Addop ::= PLUS;			
				
				