
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 31 00:05:32 CET 2014
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 31 00:05:32 CET 2014
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\010\000\002\002\004\000\002\023" +
    "\004\000\002\023\002\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\011\000\002\025\004\000" +
    "\002\025\002\000\002\026\006\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\003" +
    "\004\000\002\003\002\000\002\062\002\000\002\005\010" +
    "\000\002\033\004\000\002\033\002\000\002\034\005\000" +
    "\002\032\004\000\002\032\002\000\002\031\007\000\002" +
    "\031\012\000\002\031\011\000\002\031\014\000\002\004" +
    "\004\000\002\004\002\000\002\007\013\000\002\035\003" +
    "\000\002\035\003\000\002\010\006\000\002\010\002\000" +
    "\002\036\004\000\002\036\002\000\002\037\006\000\002" +
    "\006\003\000\002\014\004\000\002\014\002\000\002\013" +
    "\003\000\002\013\003\000\002\013\007\000\002\021\007" +
    "\000\002\021\011\000\002\020\005\000\002\020\004\000" +
    "\002\020\007\000\002\020\007\000\002\020\011\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\020" +
    "\011\000\002\022\004\000\002\022\005\000\002\022\003" +
    "\000\002\022\003\000\002\041\004\000\002\041\002\000" +
    "\002\042\004\000\002\042\002\000\002\044\004\000\002" +
    "\040\004\000\002\045\004\000\002\045\002\000\002\046" +
    "\004\000\002\043\004\000\002\050\004\000\002\050\002" +
    "\000\002\051\004\000\002\047\003\000\002\047\005\000" +
    "\002\016\004\000\002\016\005\000\002\053\004\000\002" +
    "\053\002\000\002\054\004\000\002\017\004\000\002\055" +
    "\004\000\002\055\002\000\002\056\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\006\000\002\012\003\000" +
    "\002\012\003\000\002\012\004\000\002\012\007\000\002" +
    "\012\005\000\002\015\004\000\002\060\004\000\002\060" +
    "\002\000\002\061\004\000\002\061\005\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\011\003\000\002" +
    "\011\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\004\005\001\002\000\004\002\307\001" +
    "\002\000\004\021\006\001\002\000\012\005\ufffe\021\ufffe" +
    "\024\ufffe\032\ufffe\001\002\000\012\005\017\021\ufff0\024" +
    "\010\032\015\001\002\000\004\021\025\001\002\000\012" +
    "\005\ufffd\021\ufffd\024\ufffd\032\ufffd\001\002\000\012\005" +
    "\ufffb\021\ufffb\024\ufffb\032\ufffb\001\002\000\004\021\025" +
    "\001\002\000\012\005\ufffc\021\ufffc\024\ufffc\032\ufffc\001" +
    "\002\000\004\021\236\001\002\000\012\005\uffff\021\uffff" +
    "\024\uffff\032\uffff\001\002\000\010\006\uffe4\017\uffe4\021" +
    "\uffe4\001\002\000\010\006\021\017\026\021\025\001\002" +
    "\000\004\002\001\001\002\000\004\021\uffe2\001\002\000" +
    "\004\021\027\001\002\000\010\006\uffe5\017\uffe5\021\uffe5" +
    "\001\002\000\052\005\uffdb\007\uffdb\011\uffdb\012\uffdb\015" +
    "\uffdb\021\uffdb\030\uffdb\031\uffdb\037\uffdb\040\uffdb\043\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\004\021\uffe1\001\002" +
    "\000\004\010\030\001\002\000\006\011\uffdf\021\025\001" +
    "\002\000\004\021\224\001\002\000\004\011\033\001\002" +
    "\000\006\005\ufff1\021\ufff1\001\002\000\006\005\036\021" +
    "\ufff0\001\002\000\010\005\ufff2\006\ufff2\021\ufff2\001\002" +
    "\000\024\005\uffd9\006\uffd9\013\uffd9\014\uffd9\021\uffd9\022" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\001\002\000\024\005\054" +
    "\006\046\013\050\014\052\021\042\022\045\034\041\035" +
    "\053\036\040\001\002\000\004\010\220\001\002\000\004" +
    "\010\214\001\002\000\060\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\015\uffa4\016\uffa4\030\uffa4\031\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\001\002\000\012\010\200\016\177\041\174\042\175\001" +
    "\002\000\024\005\uffd7\006\uffd7\013\uffd7\014\uffd7\021\uffd7" +
    "\022\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002\000\004\010" +
    "\141\001\002\000\010\006\uffe3\017\uffe3\021\uffe3\001\002" +
    "\000\024\005\uffda\006\uffda\013\uffda\014\uffda\021\uffda\022" +
    "\uffda\034\uffda\035\uffda\036\uffda\001\002\000\004\010\131" +
    "\001\002\000\024\005\uffd8\006\uffd8\013\uffd8\014\uffd8\021" +
    "\uffd8\022\uffd8\034\uffd8\035\uffd8\036\uffd8\001\002\000\022" +
    "\007\072\010\063\020\065\021\042\025\070\027\066\043" +
    "\060\044\062\001\002\000\004\007\057\001\002\000\024" +
    "\005\uffd9\006\uffd9\013\uffd9\014\uffd9\021\uffd9\022\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\001\002\000\024\005\054\006\056" +
    "\013\050\014\052\021\042\022\045\034\041\035\053\036" +
    "\040\001\002\000\026\005\uffce\006\uffce\013\uffce\014\uffce" +
    "\021\uffce\022\uffce\023\uffce\034\uffce\035\uffce\036\uffce\001" +
    "\002\000\026\005\uffd2\006\uffd2\013\uffd2\014\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\034\uffd2\035\uffd2\036\uffd2\001\002\000" +
    "\016\010\063\020\065\021\042\025\070\027\066\044\062" +
    "\001\002\000\004\007\126\001\002\000\004\021\025\001" +
    "\002\000\020\010\063\020\065\021\042\025\070\027\066" +
    "\043\060\044\062\001\002\000\046\007\uffad\010\110\011" +
    "\uffad\012\uffad\015\uffad\031\uffad\037\uffad\040\uffad\043\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\001\002\000\044\007\uffae\011\uffae" +
    "\012\uffae\015\uffae\031\uffae\037\uffae\040\uffae\043\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\001\002\000\044\007\uffaa\011\uffaa\012" +
    "\uffaa\015\uffaa\031\uffaa\037\uffaa\040\uffaa\043\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\001\002\000\036\007\uffb4\011\uffb4\012\uffb4" +
    "\015\uffb4\031\uffb4\037\uffb4\040\uffb4\043\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\056\uffb4\001\002\000\044" +
    "\007\uffab\011\uffab\012\uffab\015\uffab\031\uffab\037\uffab\040" +
    "\uffab\043\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\001\002\000\044\007" +
    "\uffb0\011\uffb0\012\uffb0\015\uffb0\031\uffb0\037\uffb0\040\uffb0" +
    "\043\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002\000\026\005\uffcc" +
    "\006\uffcc\013\uffcc\014\uffcc\021\uffcc\022\uffcc\023\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\001\002\000\044\007\uffb2\011\uffb2" +
    "\012\uffb2\015\uffb2\031\uffb2\037\uffb2\040\uffb2\043\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\074\054\076" +
    "\055\077\056\uffb2\001\002\000\016\010\uff99\020\uff99\021" +
    "\uff99\025\uff99\027\uff99\044\uff99\001\002\000\044\007\uffb1" +
    "\011\uffb1\012\uffb1\015\uffb1\031\uffb1\037\uffb1\040\uffb1\043" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\001\002\000\016\010\uff98\020" +
    "\uff98\021\uff98\025\uff98\027\uff98\044\uff98\001\002\000\016" +
    "\010\uff97\020\uff97\021\uff97\025\uff97\027\uff97\044\uff97\001" +
    "\002\000\016\010\063\020\065\021\042\025\070\027\066" +
    "\044\062\001\002\000\044\007\uffaf\011\uffaf\012\uffaf\015" +
    "\uffaf\031\uffaf\037\uffaf\040\uffaf\043\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\001\002\000\036\007\uffb7\011\uffb7\012\uffb7\015\103" +
    "\031\uffb7\037\uffb7\040\uffb7\043\105\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\056\uffb7\001\002\000\016\010\uff9b" +
    "\020\uff9b\021\uff9b\025\uff9b\027\uff9b\044\uff9b\001\002\000" +
    "\036\007\uffb5\011\uffb5\012\uffb5\015\uffb5\031\uffb5\037\uffb5" +
    "\040\uffb5\043\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\056\uffb5\001\002\000\016\010\uff9a\020\uff9a\021\uff9a" +
    "\025\uff9a\027\uff9a\044\uff9a\001\002\000\016\010\063\020" +
    "\065\021\042\025\070\027\066\044\062\001\002\000\036" +
    "\007\uffb3\011\uffb3\012\uffb3\015\uffb3\031\uffb3\037\uffb3\040" +
    "\uffb3\043\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\056\uffb3\001\002\000\022\010\063\011\uffc5\020\065\021" +
    "\042\025\070\027\066\043\060\044\062\001\002\000\006" +
    "\011\uffc3\012\uffc3\001\002\000\004\011\113\001\002\000" +
    "\044\007\uffac\011\uffac\012\uffac\015\uffac\031\uffac\037\uffac" +
    "\040\uffac\043\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\001\002\000\006" +
    "\011\uffc6\012\116\001\002\000\006\011\uffc4\012\uffc4\001" +
    "\002\000\020\010\063\020\065\021\042\025\070\027\066" +
    "\043\060\044\062\001\002\000\006\011\uffc2\012\uffc2\001" +
    "\002\000\004\011\121\001\002\000\044\007\uffa7\011\uffa7" +
    "\012\uffa7\015\uffa7\031\uffa7\037\uffa7\040\uffa7\043\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\001\002\000\046\007\uffa9\011\uffa9\012" +
    "\uffa9\015\uffa9\030\123\031\uffa9\037\uffa9\040\uffa9\043\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\001\002\000\020\010\063\020\065" +
    "\021\042\025\070\027\066\043\060\044\062\001\002\000" +
    "\004\031\125\001\002\000\044\007\uffa8\011\uffa8\012\uffa8" +
    "\015\uffa8\031\uffa8\037\uffa8\040\uffa8\043\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\001\002\000\026\005\uffcd\006\uffcd\013\uffcd\014" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\001\002\000\036\007\uffb4\011\uffb4\012\uffb4\015\uffb4\031" +
    "\uffb4\037\uffb4\040\uffb4\043\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\056\uffb4\001\002\000\036\007\uffb6\011" +
    "\uffb6\012\uffb6\015\103\031\uffb6\037\uffb6\040\uffb6\043\105" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\056\uffb6\001" +
    "\002\000\020\010\063\020\065\021\042\025\070\027\066" +
    "\043\060\044\062\001\002\000\006\011\133\012\134\001" +
    "\002\000\004\007\140\001\002\000\004\020\135\001\002" +
    "\000\004\011\136\001\002\000\004\007\137\001\002\000" +
    "\026\005\uffcf\006\uffcf\013\uffcf\014\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\034\uffcf\035\uffcf\036\uffcf\001\002\000\026\005" +
    "\uffd0\006\uffd0\013\uffd0\014\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\001\002\000\020\010\063\020" +
    "\065\021\042\025\070\027\066\043\060\044\062\001\002" +
    "\000\024\011\uffb9\037\uffb9\040\uffb9\046\165\047\164\050" +
    "\166\051\171\052\167\056\170\001\002\000\004\011\156" +
    "\001\002\000\010\011\uffbb\037\uffbb\040\uffbb\001\002\000" +
    "\006\011\uffbf\037\uffbf\001\002\000\006\011\uffc1\037\150" +
    "\001\002\000\006\011\uffc0\037\uffc0\001\002\000\020\010" +
    "\063\020\065\021\042\025\070\027\066\043\060\044\062" +
    "\001\002\000\006\011\uffbe\037\uffbe\001\002\000\010\011" +
    "\uffbd\037\uffbd\040\154\001\002\000\010\011\uffbc\037\uffbc" +
    "\040\uffbc\001\002\000\020\010\063\020\065\021\042\025" +
    "\070\027\066\043\060\044\062\001\002\000\010\011\uffba" +
    "\037\uffba\040\uffba\001\002\000\022\005\054\013\050\014" +
    "\052\021\042\022\045\034\041\035\053\036\040\001\002" +
    "\000\024\005\uffd5\006\uffd5\013\uffd5\014\uffd5\021\uffd5\022" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\001\002\000\026\005\uffd8" +
    "\006\uffd8\013\uffd8\014\uffd8\021\uffd8\022\uffd8\023\161\034" +
    "\uffd8\035\uffd8\036\uffd8\001\002\000\020\005\054\013\050" +
    "\014\052\021\042\022\045\035\053\036\040\001\002\000" +
    "\024\005\uffd4\006\uffd4\013\uffd4\014\uffd4\021\uffd4\022\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\001\002\000\026\005\uffcb\006" +
    "\uffcb\013\uffcb\014\uffcb\021\uffcb\022\uffcb\023\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\001\002\000\020\010\uff9d\020\uff9d\021" +
    "\uff9d\025\uff9d\027\uff9d\043\uff9d\044\uff9d\001\002\000\020" +
    "\010\uffa1\020\uffa1\021\uffa1\025\uffa1\027\uffa1\043\uffa1\044" +
    "\uffa1\001\002\000\020\010\uff9f\020\uff9f\021\uff9f\025\uff9f" +
    "\027\uff9f\043\uff9f\044\uff9f\001\002\000\020\010\uff9c\020" +
    "\uff9c\021\uff9c\025\uff9c\027\uff9c\043\uff9c\044\uff9c\001\002" +
    "\000\020\010\uffa0\020\uffa0\021\uffa0\025\uffa0\027\uffa0\043" +
    "\uffa0\044\uffa0\001\002\000\020\010\uff9e\020\uff9e\021\uff9e" +
    "\025\uff9e\027\uff9e\043\uff9e\044\uff9e\001\002\000\020\010" +
    "\063\020\065\021\042\025\070\027\066\043\060\044\062" +
    "\001\002\000\010\011\uffb8\037\uffb8\040\uffb8\001\002\000" +
    "\004\007\uffc8\001\002\000\004\007\uffc7\001\002\000\004" +
    "\007\204\001\002\000\020\010\063\020\065\021\042\025" +
    "\070\027\066\043\060\044\062\001\002\000\022\010\063" +
    "\011\uffc5\020\065\021\042\025\070\027\066\043\060\044" +
    "\062\001\002\000\004\011\202\001\002\000\004\007\uffc9" +
    "\001\002\000\004\007\uffca\001\002\000\026\005\uffd3\006" +
    "\uffd3\013\uffd3\014\uffd3\021\uffd3\022\uffd3\023\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\001\002\000\060\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\015\uffa6\016\uffa6\030\210\031\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\045\207\046\uffa6\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6" +
    "\056\uffa6\001\002\000\060\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\015\uffa5\016\uffa5\030\uffa5\031\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5" +
    "\001\002\000\004\021\213\001\002\000\020\010\063\020" +
    "\065\021\042\025\070\027\066\043\060\044\062\001\002" +
    "\000\004\031\212\001\002\000\060\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\015\uffa2\016\uffa2\030\uffa2\031\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\001\002\000\060\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\015\uffa3\016\uffa3\030\uffa3\031\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\001\002\000\020\010\063\020\065\021\042\025\070\027" +
    "\066\043\060\044\062\001\002\000\004\011\216\001\002" +
    "\000\022\005\054\013\050\014\052\021\042\022\045\034" +
    "\041\035\053\036\040\001\002\000\024\005\uffd6\006\uffd6" +
    "\013\uffd6\014\uffd6\021\uffd6\022\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\001\002\000\004\021\042\001\002\000\004\011\222" +
    "\001\002\000\004\007\223\001\002\000\026\005\uffd1\006" +
    "\uffd1\013\uffd1\014\uffd1\021\uffd1\022\uffd1\023\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\001\002\000\010\011\uffea\012\uffea\030" +
    "\225\001\002\000\004\031\235\001\002\000\006\011\uffdd" +
    "\012\uffdd\001\002\000\006\011\uffe0\012\231\001\002\000" +
    "\006\011\uffde\012\uffde\001\002\000\004\021\025\001\002" +
    "\000\004\021\233\001\002\000\010\011\uffea\012\uffea\030" +
    "\225\001\002\000\006\011\uffdc\012\uffdc\001\002\000\010" +
    "\007\uffeb\011\uffeb\012\uffeb\001\002\000\006\005\240\033" +
    "\237\001\002\000\004\021\025\001\002\000\010\005\ufff1" +
    "\006\ufff1\021\ufff1\001\002\000\010\005\243\006\242\021" +
    "\ufff0\001\002\000\012\005\uffe9\021\uffe9\024\uffe9\032\uffe9" +
    "\001\002\000\010\006\uffe4\017\uffe4\021\uffe4\001\002\000" +
    "\010\006\245\017\026\021\025\001\002\000\004\006\246" +
    "\001\002\000\012\005\uffe8\021\uffe8\024\uffe8\032\uffe8\001" +
    "\002\000\004\005\250\001\002\000\010\005\ufff1\006\ufff1" +
    "\021\ufff1\001\002\000\010\005\253\006\252\021\ufff0\001" +
    "\002\000\012\005\uffe7\021\uffe7\024\uffe7\032\uffe7\001\002" +
    "\000\010\006\uffe4\017\uffe4\021\uffe4\001\002\000\010\006" +
    "\255\017\026\021\025\001\002\000\004\006\256\001\002" +
    "\000\012\005\uffe6\021\uffe6\024\uffe6\032\uffe6\001\002\000" +
    "\004\021\260\001\002\000\010\007\uffea\012\uffea\030\225" +
    "\001\002\000\006\007\uffed\012\uffed\001\002\000\006\007" +
    "\264\012\265\001\002\000\006\007\uffee\012\uffee\001\002" +
    "\000\014\005\uffef\006\uffef\021\uffef\024\uffef\032\uffef\001" +
    "\002\000\004\021\266\001\002\000\010\007\uffea\012\uffea" +
    "\030\225\001\002\000\006\007\uffec\012\uffec\001\002\000" +
    "\004\021\271\001\002\000\004\016\272\001\002\000\012" +
    "\020\274\025\277\026\273\027\276\001\002\000\006\007" +
    "\ufff4\012\ufff4\001\002\000\006\007\ufff6\012\ufff6\001\002" +
    "\000\006\007\ufff8\012\ufff8\001\002\000\006\007\ufff3\012" +
    "\ufff3\001\002\000\006\007\ufff5\012\ufff5\001\002\000\006" +
    "\007\301\012\303\001\002\000\012\005\ufffa\021\ufffa\024" +
    "\ufffa\032\ufffa\001\002\000\006\007\ufff9\012\ufff9\001\002" +
    "\000\004\021\304\001\002\000\004\016\305\001\002\000" +
    "\012\020\274\025\277\026\273\027\276\001\002\000\006" +
    "\007\ufff7\012\ufff7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\006\001\001\000\014\005\013" +
    "\027\015\030\010\031\011\062\012\001\001\000\004\006" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\017\001\001\000\010\006\021" +
    "\007\023\035\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\030\010" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\033\001\001\000\006\005\034\062\012\001\001\000" +
    "\002\001\001\000\004\014\036\001\001\000\012\013\046" +
    "\015\042\020\050\021\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\204\001\001\000\004\022\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\070\015\063\016\060\017\066\001\001\000" +
    "\002\001\001\000\004\014\054\001\001\000\012\013\046" +
    "\015\042\020\050\021\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\070\015\063\017\126\001\001" +
    "\000\002\001\001\000\004\006\121\001\001\000\012\012" +
    "\070\015\063\016\117\017\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\101\001" +
    "\001\000\002\001\001\000\004\055\072\001\001\000\002" +
    "\001\001\000\006\056\074\057\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\100\015\063\001\001\000\002\001\001\000" +
    "\006\011\105\054\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\070\015\063\017" +
    "\106\001\001\000\002\001\001\000\014\012\070\015\063" +
    "\016\110\017\066\041\111\001\001\000\004\042\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\114" +
    "\001\001\000\002\001\001\000\012\012\070\015\063\016" +
    "\116\017\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\070\015" +
    "\063\016\123\017\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\127\001\001\000" +
    "\006\011\105\054\103\001\001\000\012\012\070\015\063" +
    "\016\131\017\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\070\015" +
    "\063\016\141\017\066\040\142\043\144\047\143\001\001" +
    "\000\004\052\171\001\001\000\002\001\001\000\004\050" +
    "\151\001\001\000\004\045\145\001\001\000\004\046\146" +
    "\001\001\000\002\001\001\000\016\012\070\015\063\016" +
    "\141\017\066\043\150\047\143\001\001\000\002\001\001" +
    "\000\004\051\152\001\001\000\002\001\001\000\014\012" +
    "\070\015\063\016\141\017\066\047\154\001\001\000\002" +
    "\001\001\000\012\013\156\015\042\020\157\021\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\042" +
    "\020\162\021\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\070\015\063\016\172\017\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\070\015\063\016\202\017\066\001\001" +
    "\000\014\012\070\015\063\016\110\017\066\041\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\070\015\063\016\210" +
    "\017\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\070\015\063\016\141\017\066" +
    "\040\214\043\144\047\143\001\001\000\002\001\001\000" +
    "\012\013\216\015\042\020\050\021\043\001\001\000\002" +
    "\001\001\000\004\015\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\225\001\001" +
    "\000\002\001\001\000\004\036\226\001\001\000\004\037" +
    "\227\001\001\000\002\001\001\000\004\006\231\001\001" +
    "\000\002\001\001\000\004\032\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\246" +
    "\001\001\000\004\003\240\001\001\000\006\005\034\062" +
    "\012\001\001\000\002\001\001\000\004\004\243\001\001" +
    "\000\010\006\021\007\023\035\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\250" +
    "\001\001\000\006\005\034\062\012\001\001\000\002\001" +
    "\001\000\004\004\253\001\001\000\010\006\021\007\023" +
    "\035\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\260\001\001\000\004\033\261" +
    "\001\001\000\004\034\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\305\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
	 {
		if(s.value.toString().equals("char") && Kontekst.globalna())dekChar++;
		Kontekst.push(s);
		System.out.println(s.toString() + " " + s.value.toString());
		
	}
	return s;

    }


	
	
	
	
	//Logger log = Logger.getLogger(getClass());
	
	int dekChar = 0;
	int dekGlobNizova = 0;
	int defFunkcijaUProgramu= 0;
	int defUnutrasnjihKlasa = 0;
	int blokoviNaredbi = 0;
	int pozivFunkcijaUMain =0;
	int brojNewNaredbi =0;
	int defMetodaUnutrasnjihKlasa =0;
	int dekPoljaUnutrasnjihKlasa =0;
	int brojIzvodjenja =0;
	
	
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
 
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
        
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        //log.error(msg.toString());
        System.out.println(msg.toString());
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Mulop ::= PROCENAT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Mulop ::= PODELJENO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Mulop ::= PUTA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Relop ::= MANJE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Relop ::= MANJE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Relop ::= VECE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Relop ::= VECE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Relop ::= UZVICNIK_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Relop ::= JEDNAKO_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Des ::= O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Des ::= TACKA IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DesList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DesList ::= DesList Des 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Designator ::= IDENT DesList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Factor ::= O_ZAG Expr Z_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Factor ::= NEW Type O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Factor ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= Designator O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MulFac ::= Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFac",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MulFacList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MulFacList ::= MulFacList MulFac 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Term ::= Factor MulFacList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AddTerm ::= Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AddTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AddTermList ::= AddTermList AddTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= MINUS Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Fact ::= I CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Fact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FactList ::= FactList Fact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CondTerm ::= CondFact FactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Cond ::= ILI CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Cond",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CondList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CondList ::= CondList Cond 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condition ::= CondTerm CondList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Act ::= ZAREZ Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Act",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ActList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ActList ::= ActList Act 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ActPars ::= Expr ActList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Something ::= MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Something ::= PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Something ::= O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Something ::= JEDNAKO Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matched ::= RETURN TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= RETURN Expr TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.blokoviNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matched ::= PRINT O_ZAG Expr ZAREZ NUMBER Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matched ::= PRINT O_ZAG Expr Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matched ::= READ O_ZAG Designator Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matched ::= BREAK TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Matched ::= Designator Something TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Unmatched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Unmatched ::= IF O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= WHILE O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormParamDec ::= ZAREZ Type IDENT Niz 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDec",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormParamDecList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormParamDecList ::= FormParamDecList FormParamDec 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FormPars ::= Type IDENT Niz FormParamDecList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Prefix ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Prefix ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDecl ::= Prefix IDENT O_ZAG FormPars Z_ZAG VarDeclList O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.defMetodaUnutrasnjihKlasa++;  parser.defFunkcijaUProgramu++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++;parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Niz ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Niz ::= O_UGL_ZAG Z_UGL_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.globalna())parser.dekGlobNizova++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Id ::= ZAREZ IDENT Niz 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Id",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IdList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IdList ::= IdList Id 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= NT$0 Type IDENT Niz IdList TACKA_ZAREZ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Val ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Val ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Val ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Val ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AssignVal ::= ZAREZ IDENT JEDNAKO Val 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignVal",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AssignValList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AssignValList ::= AssignValList AssignVal 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type IDENT JEDNAKO Val AssignValList TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM IDENT DeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

