
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 01 16:15:22 CET 2015
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 01 16:15:22 CET 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\010\000\002\002\004\000\002\023" +
    "\004\000\002\023\002\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\011\000\002\030\005\000" +
    "\002\025\004\000\002\025\002\000\002\026\006\000\002" +
    "\026\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\003\004\000\002\003\002" +
    "\000\002\062\002\000\002\005\010\000\002\033\004\000" +
    "\002\033\002\000\002\034\005\000\002\032\004\000\002" +
    "\032\002\000\002\031\007\000\002\031\012\000\002\031" +
    "\011\000\002\031\014\000\002\031\007\000\002\031\012" +
    "\000\002\031\011\000\002\031\014\000\002\031\010\000" +
    "\002\031\013\000\002\004\004\000\002\004\002\000\002" +
    "\007\013\000\002\007\013\000\002\007\013\000\002\035" +
    "\003\000\002\035\003\000\002\010\006\000\002\010\002" +
    "\000\002\036\004\000\002\036\002\000\002\037\006\000" +
    "\002\037\004\000\002\006\003\000\002\014\004\000\002" +
    "\014\002\000\002\013\003\000\002\013\003\000\002\013" +
    "\007\000\002\013\007\000\002\021\007\000\002\021\011" +
    "\000\002\021\007\000\002\021\011\000\002\020\004\000" +
    "\002\020\004\000\002\020\007\000\002\020\007\000\002" +
    "\020\011\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\011\000\002\020\011\000\002\022\005" +
    "\000\002\022\005\000\002\022\006\000\002\022\004\000" +
    "\002\022\006\000\002\022\004\000\002\022\004\000\002" +
    "\041\004\000\002\041\002\000\002\042\004\000\002\042" +
    "\002\000\002\044\004\000\002\040\004\000\002\045\004" +
    "\000\002\045\002\000\002\046\004\000\002\043\004\000" +
    "\002\050\004\000\002\050\002\000\002\051\004\000\002" +
    "\047\003\000\002\047\005\000\002\016\004\000\002\016" +
    "\005\000\002\053\004\000\002\053\002\000\002\054\004" +
    "\000\002\017\004\000\002\055\004\000\002\055\002\000" +
    "\002\056\004\000\002\012\003\000\002\012\003\000\002" +
    "\012\006\000\002\012\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\007\000\002\012\005\000\002\015\004" +
    "\000\002\060\004\000\002\060\002\000\002\061\004\000" +
    "\002\061\005\000\002\061\005\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\011\003\000\002\011\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\004\005\001\002\000\004\002\372\001" +
    "\002\000\004\021\006\001\002\000\014\003\ufffe\005\ufffe" +
    "\021\ufffe\024\ufffe\032\ufffe\001\002\000\014\003\014\005" +
    "\016\021\uffee\024\020\032\017\001\002\000\014\003\uffff" +
    "\005\uffff\021\uffff\024\uffff\032\uffff\001\002\000\004\021" +
    "\022\001\002\000\014\003\ufffc\005\ufffc\021\ufffc\024\ufffc" +
    "\032\ufffc\001\002\000\014\003\ufffb\005\ufffb\021\ufffb\024" +
    "\ufffb\032\ufffb\001\002\000\006\007\ufff7\012\ufff7\001\002" +
    "\000\014\003\ufffd\005\ufffd\021\ufffd\024\ufffd\032\ufffd\001" +
    "\002\000\010\006\uffdc\017\uffdc\021\uffdc\001\002\000\004" +
    "\021\042\001\002\000\004\021\022\001\002\000\004\021" +
    "\023\001\002\000\054\003\uffd0\005\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\015\uffd0\021\uffd0\030\uffd0\031\uffd0\037\uffd0\040" +
    "\uffd0\043\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\004\016" +
    "\024\001\002\000\012\020\026\025\031\026\025\027\030" +
    "\001\002\000\006\007\ufff2\012\ufff2\001\002\000\006\007" +
    "\ufff4\012\ufff4\001\002\000\006\007\ufff7\012\ufff7\001\002" +
    "\000\006\007\ufff1\012\ufff1\001\002\000\006\007\ufff3\012" +
    "\ufff3\001\002\000\006\007\033\012\035\001\002\000\014" +
    "\003\ufffa\005\ufffa\021\ufffa\024\ufffa\032\ufffa\001\002\000" +
    "\006\007\ufff8\012\ufff8\001\002\000\006\003\036\021\037" +
    "\001\002\000\006\007\ufff5\012\ufff5\001\002\000\004\016" +
    "\040\001\002\000\012\020\026\025\031\026\025\027\030" +
    "\001\002\000\006\007\ufff6\012\ufff6\001\002\000\010\003" +
    "\044\005\045\033\043\001\002\000\004\021\022\001\002" +
    "\000\004\005\330\001\002\000\012\003\047\005\uffef\006" +
    "\uffef\021\uffef\001\002\000\010\005\324\006\323\021\uffee" +
    "\001\002\000\006\005\051\006\050\001\002\000\014\003" +
    "\uffe3\005\uffe3\021\uffe3\024\uffe3\032\uffe3\001\002\000\010" +
    "\006\uffdc\017\uffdc\021\uffdc\001\002\000\010\006\053\017" +
    "\057\021\022\001\002\000\004\006\322\001\002\000\004" +
    "\021\uffd8\001\002\000\004\021\060\001\002\000\010\006" +
    "\uffdd\017\uffdd\021\uffdd\001\002\000\004\021\uffd7\001\002" +
    "\000\004\010\061\001\002\000\010\003\063\011\uffd5\021" +
    "\022\001\002\000\004\021\307\001\002\000\004\011\302" +
    "\001\002\000\004\011\065\001\002\000\010\003\067\005" +
    "\uffef\021\uffef\001\002\000\006\005\277\021\uffee\001\002" +
    "\000\004\005\070\001\002\000\026\003\uffce\005\uffce\006" +
    "\uffce\013\uffce\014\uffce\021\uffce\022\uffce\034\uffce\035\uffce" +
    "\036\uffce\001\002\000\026\003\102\005\110\006\077\013" +
    "\103\014\105\021\074\022\100\034\073\035\107\036\072" +
    "\001\002\000\004\010\272\001\002\000\004\010\263\001" +
    "\002\000\062\003\uff92\007\uff92\010\uff92\011\uff92\012\uff92" +
    "\015\uff92\016\uff92\030\uff92\031\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\001" +
    "\002\000\026\003\uffcc\005\uffcc\006\uffcc\013\uffcc\014\uffcc" +
    "\021\uffcc\022\uffcc\034\uffcc\035\uffcc\036\uffcc\001\002\000" +
    "\012\010\244\016\243\041\241\042\242\001\002\000\010" +
    "\006\uffda\017\uffda\021\uffda\001\002\000\004\010\177\001" +
    "\002\000\026\003\uffcf\005\uffcf\006\uffcf\013\uffcf\014\uffcf" +
    "\021\uffcf\022\uffcf\034\uffcf\035\uffcf\036\uffcf\001\002\000" +
    "\004\011\176\001\002\000\004\010\166\001\002\000\026" +
    "\003\uffcd\005\uffcd\006\uffcd\013\uffcd\014\uffcd\021\uffcd\022" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002\000\022\007\127" +
    "\010\120\020\122\021\074\025\125\027\123\043\115\044" +
    "\117\001\002\000\004\007\114\001\002\000\004\007\113" +
    "\001\002\000\026\003\uffce\005\uffce\006\uffce\013\uffce\014" +
    "\uffce\021\uffce\022\uffce\034\uffce\035\uffce\036\uffce\001\002" +
    "\000\026\003\102\005\110\006\112\013\103\014\105\021" +
    "\074\022\100\034\073\035\107\036\072\001\002\000\030" +
    "\003\uffc0\005\uffc0\006\uffc0\013\uffc0\014\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\034\uffc0\035\uffc0\036\uffc0\001\002\000\030" +
    "\003\uffc4\005\uffc4\006\uffc4\013\uffc4\014\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\034\uffc4\035\uffc4\036\uffc4\001\002\000\030" +
    "\003\uffc5\005\uffc5\006\uffc5\013\uffc5\014\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\034\uffc5\035\uffc5\036\uffc5\001\002\000\016" +
    "\010\120\020\122\021\074\025\125\027\123\044\117\001" +
    "\002\000\004\007\163\001\002\000\004\021\022\001\002" +
    "\000\020\010\120\020\122\021\074\025\125\027\123\043" +
    "\115\044\117\001\002\000\050\003\uff9b\007\uff9b\010\145" +
    "\011\uff9b\012\uff9b\015\uff9b\031\uff9b\037\uff9b\040\uff9b\043" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\001\002\000\046\003\uff9c\007" +
    "\uff9c\011\uff9c\012\uff9c\015\uff9c\031\uff9c\037\uff9c\040\uff9c" +
    "\043\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\001\002\000\046\003\uff98" +
    "\007\uff98\011\uff98\012\uff98\015\uff98\031\uff98\037\uff98\040" +
    "\uff98\043\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\001\002\000\040\003" +
    "\uffa2\007\uffa2\011\uffa2\012\uffa2\015\uffa2\031\uffa2\037\uffa2" +
    "\040\uffa2\043\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\056\uffa2\001\002\000\046\003\uff99\007\uff99\011\uff99" +
    "\012\uff99\015\uff99\031\uff99\037\uff99\040\uff99\043\uff99\046" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\001\002\000\046\003\uff9e\007\uff9e\011" +
    "\uff9e\012\uff9e\015\uff9e\031\uff9e\037\uff9e\040\uff9e\043\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\001\002\000\030\003\uffbe\005\uffbe" +
    "\006\uffbe\013\uffbe\014\uffbe\021\uffbe\022\uffbe\023\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\001\002\000\046\003\uffa0\007\uffa0" +
    "\011\uffa0\012\uffa0\015\uffa0\031\uffa0\037\uffa0\040\uffa0\043" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\131" +
    "\054\132\055\133\056\uffa0\001\002\000\016\010\uff86\020" +
    "\uff86\021\uff86\025\uff86\027\uff86\044\uff86\001\002\000\016" +
    "\010\uff85\020\uff85\021\uff85\025\uff85\027\uff85\044\uff85\001" +
    "\002\000\016\010\uff84\020\uff84\021\uff84\025\uff84\027\uff84" +
    "\044\uff84\001\002\000\046\003\uff9f\007\uff9f\011\uff9f\012" +
    "\uff9f\015\uff9f\031\uff9f\037\uff9f\040\uff9f\043\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\001\002\000\016\010\120\020\122\021\074" +
    "\025\125\027\123\044\117\001\002\000\046\003\uff9d\007" +
    "\uff9d\011\uff9d\012\uff9d\015\uff9d\031\uff9d\037\uff9d\040\uff9d" +
    "\043\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\001\002\000\040\003\uffa5" +
    "\007\uffa5\011\uffa5\012\uffa5\015\140\031\uffa5\037\uffa5\040" +
    "\uffa5\043\142\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\056\uffa5\001\002\000\016\010\uff88\020\uff88\021\uff88\025" +
    "\uff88\027\uff88\044\uff88\001\002\000\040\003\uffa3\007\uffa3" +
    "\011\uffa3\012\uffa3\015\uffa3\031\uffa3\037\uffa3\040\uffa3\043" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\056\uffa3" +
    "\001\002\000\016\010\uff87\020\uff87\021\uff87\025\uff87\027" +
    "\uff87\044\uff87\001\002\000\016\010\120\020\122\021\074" +
    "\025\125\027\123\044\117\001\002\000\040\003\uffa1\007" +
    "\uffa1\011\uffa1\012\uffa1\015\uffa1\031\uffa1\037\uffa1\040\uffa1" +
    "\043\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\056" +
    "\uffa1\001\002\000\022\010\120\011\uffb3\020\122\021\074" +
    "\025\125\027\123\043\115\044\117\001\002\000\010\003" +
    "\uffb1\011\uffb1\012\uffb1\001\002\000\004\011\150\001\002" +
    "\000\046\003\uff9a\007\uff9a\011\uff9a\012\uff9a\015\uff9a\031" +
    "\uff9a\037\uff9a\040\uff9a\043\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001" +
    "\002\000\010\003\uffb4\011\uffb4\012\153\001\002\000\010" +
    "\003\uffb2\011\uffb2\012\uffb2\001\002\000\020\010\120\020" +
    "\122\021\074\025\125\027\123\043\115\044\117\001\002" +
    "\000\010\003\uffb0\011\uffb0\012\uffb0\001\002\000\004\011" +
    "\156\001\002\000\046\003\uff95\007\uff95\011\uff95\012\uff95" +
    "\015\uff95\031\uff95\037\uff95\040\uff95\043\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\001\002\000\050\003\uff97\007\uff97\011\uff97\012" +
    "\uff97\015\uff97\030\160\031\uff97\037\uff97\040\uff97\043\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054" +
    "\uff97\055\uff97\056\uff97\001\002\000\020\010\120\020\122" +
    "\021\074\025\125\027\123\043\115\044\117\001\002\000" +
    "\004\031\162\001\002\000\046\003\uff96\007\uff96\011\uff96" +
    "\012\uff96\015\uff96\031\uff96\037\uff96\040\uff96\043\uff96\046" +
    "\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\001\002\000\030\003\uffbf\005\uffbf\006" +
    "\uffbf\013\uffbf\014\uffbf\021\uffbf\022\uffbf\023\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\001\002\000\040\003\uffa2\007\uffa2\011" +
    "\uffa2\012\uffa2\015\uffa2\031\uffa2\037\uffa2\040\uffa2\043\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\056\uffa2\001" +
    "\002\000\040\003\uffa4\007\uffa4\011\uffa4\012\uffa4\015\140" +
    "\031\uffa4\037\uffa4\040\uffa4\043\142\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\056\uffa4\001\002\000\020\010\120" +
    "\020\122\021\074\025\125\027\123\043\115\044\117\001" +
    "\002\000\006\011\170\012\171\001\002\000\004\007\175" +
    "\001\002\000\004\020\172\001\002\000\004\011\173\001" +
    "\002\000\004\007\174\001\002\000\030\003\uffc1\005\uffc1" +
    "\006\uffc1\013\uffc1\014\uffc1\021\uffc1\022\uffc1\023\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\001\002\000\030\003\uffc2\005\uffc2" +
    "\006\uffc2\013\uffc2\014\uffc2\021\uffc2\022\uffc2\023\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\001\002\000\004\007\uffb8\001\002" +
    "\000\022\003\203\010\120\020\122\021\074\025\125\027" +
    "\123\043\115\044\117\001\002\000\024\011\uffa7\037\uffa7" +
    "\040\uffa7\046\232\047\231\050\233\051\237\052\234\056" +
    "\235\001\002\000\004\011\223\001\002\000\010\011\uffa9" +
    "\037\uffa9\040\uffa9\001\002\000\004\011\211\001\002\000" +
    "\006\011\uffad\037\uffad\001\002\000\006\011\uffaf\037\207" +
    "\001\002\000\006\011\uffae\037\uffae\001\002\000\020\010" +
    "\120\020\122\021\074\025\125\027\123\043\115\044\117" +
    "\001\002\000\006\011\uffac\037\uffac\001\002\000\024\003" +
    "\102\005\110\013\103\014\105\021\074\022\100\034\073" +
    "\035\107\036\072\001\002\000\026\003\uffc7\005\uffc7\006" +
    "\uffc7\013\uffc7\014\uffc7\021\uffc7\022\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\001\002\000\030\003\uffcd\005\uffcd\006\uffcd\013" +
    "\uffcd\014\uffcd\021\uffcd\022\uffcd\023\214\034\uffcd\035\uffcd" +
    "\036\uffcd\001\002\000\022\003\102\005\110\013\103\014" +
    "\105\021\074\022\100\035\107\036\072\001\002\000\026" +
    "\003\uffc6\005\uffc6\006\uffc6\013\uffc6\014\uffc6\021\uffc6\022" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\001\002\000\030\003\uffbc" +
    "\005\uffbc\006\uffbc\013\uffbc\014\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\001\002\000\010\011\uffab" +
    "\037\uffab\040\221\001\002\000\010\011\uffaa\037\uffaa\040" +
    "\uffaa\001\002\000\020\010\120\020\122\021\074\025\125" +
    "\027\123\043\115\044\117\001\002\000\010\011\uffa8\037" +
    "\uffa8\040\uffa8\001\002\000\024\003\102\005\110\013\103" +
    "\014\105\021\074\022\100\034\073\035\107\036\072\001" +
    "\002\000\026\003\uffc9\005\uffc9\006\uffc9\013\uffc9\014\uffc9" +
    "\021\uffc9\022\uffc9\034\uffc9\035\uffc9\036\uffc9\001\002\000" +
    "\030\003\uffcd\005\uffcd\006\uffcd\013\uffcd\014\uffcd\021\uffcd" +
    "\022\uffcd\023\226\034\uffcd\035\uffcd\036\uffcd\001\002\000" +
    "\022\003\102\005\110\013\103\014\105\021\074\022\100" +
    "\035\107\036\072\001\002\000\026\003\uffc8\005\uffc8\006" +
    "\uffc8\013\uffc8\014\uffc8\021\uffc8\022\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\001\002\000\030\003\uffbd\005\uffbd\006\uffbd\013" +
    "\uffbd\014\uffbd\021\uffbd\022\uffbd\023\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\001\002\000\020\010\uff8a\020\uff8a\021\uff8a\025" +
    "\uff8a\027\uff8a\043\uff8a\044\uff8a\001\002\000\020\010\uff8e" +
    "\020\uff8e\021\uff8e\025\uff8e\027\uff8e\043\uff8e\044\uff8e\001" +
    "\002\000\020\010\uff8c\020\uff8c\021\uff8c\025\uff8c\027\uff8c" +
    "\043\uff8c\044\uff8c\001\002\000\020\010\uff89\020\uff89\021" +
    "\uff89\025\uff89\027\uff89\043\uff89\044\uff89\001\002\000\020" +
    "\010\uff8d\020\uff8d\021\uff8d\025\uff8d\027\uff8d\043\uff8d\044" +
    "\uff8d\001\002\000\020\010\120\020\122\021\074\025\125" +
    "\027\123\043\115\044\117\001\002\000\020\010\uff8b\020" +
    "\uff8b\021\uff8b\025\uff8b\027\uff8b\043\uff8b\044\uff8b\001\002" +
    "\000\010\011\uffa6\037\uffa6\040\uffa6\001\002\000\004\007" +
    "\uffb6\001\002\000\004\007\uffb5\001\002\000\022\003\251" +
    "\010\120\020\122\021\074\025\125\027\123\043\115\044" +
    "\117\001\002\000\024\003\uffb3\010\120\011\uffb3\020\122" +
    "\021\074\025\125\027\123\043\115\044\117\001\002\000" +
    "\006\003\246\011\247\001\002\000\004\007\uffb7\001\002" +
    "\000\004\007\uffb9\001\002\000\004\007\uffbb\001\002\000" +
    "\004\007\uffba\001\002\000\062\003\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\015\uff94\016\uff94\030\254\031\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\045\255\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\001\002\000\062\003\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\015\uff93\016\uff93\030\uff93\031\uff93\037" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\001\002\000\022\003\260\010\120\020\122" +
    "\021\074\025\125\027\123\043\115\044\117\001\002\000" +
    "\004\021\256\001\002\000\062\003\uff91\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\015\uff91\016\uff91\030\uff91\031\uff91\037" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\001\002\000\004\031\262\001\002\000\004" +
    "\031\261\001\002\000\062\003\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\015\uff8f\016\uff8f\030\uff8f\031\uff8f\037\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\043\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f" +
    "\056\uff8f\001\002\000\062\003\uff90\007\uff90\010\uff90\011" +
    "\uff90\012\uff90\015\uff90\016\uff90\030\uff90\031\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\045\uff90\046\uff90\047" +
    "\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90" +
    "\056\uff90\001\002\000\022\003\265\010\120\020\122\021" +
    "\074\025\125\027\123\043\115\044\117\001\002\000\004" +
    "\011\270\001\002\000\004\011\266\001\002\000\024\003" +
    "\102\005\110\013\103\014\105\021\074\022\100\034\073" +
    "\035\107\036\072\001\002\000\026\003\uffca\005\uffca\006" +
    "\uffca\013\uffca\014\uffca\021\uffca\022\uffca\034\uffca\035\uffca" +
    "\036\uffca\001\002\000\024\003\102\005\110\013\103\014" +
    "\105\021\074\022\100\034\073\035\107\036\072\001\002" +
    "\000\026\003\uffcb\005\uffcb\006\uffcb\013\uffcb\014\uffcb\021" +
    "\uffcb\022\uffcb\034\uffcb\035\uffcb\036\uffcb\001\002\000\004" +
    "\021\074\001\002\000\004\011\274\001\002\000\004\007" +
    "\275\001\002\000\030\003\uffc3\005\uffc3\006\uffc3\013\uffc3" +
    "\014\uffc3\021\uffc3\022\uffc3\023\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\001\002\000\010\005\ufff0\006\ufff0\021\ufff0\001\002" +
    "\000\026\003\uffce\005\uffce\006\uffce\013\uffce\014\uffce\021" +
    "\uffce\022\uffce\034\uffce\035\uffce\036\uffce\001\002\000\026" +
    "\003\102\005\110\006\301\013\103\014\105\021\074\022" +
    "\100\034\073\035\107\036\072\001\002\000\010\006\uffdb" +
    "\017\uffdb\021\uffdb\001\002\000\006\005\uffef\021\uffef\001" +
    "\002\000\006\005\304\021\uffee\001\002\000\026\003\uffce" +
    "\005\uffce\006\uffce\013\uffce\014\uffce\021\uffce\022\uffce\034" +
    "\uffce\035\uffce\036\uffce\001\002\000\026\003\102\005\110" +
    "\006\306\013\103\014\105\021\074\022\100\034\073\035" +
    "\107\036\072\001\002\000\010\006\uffd9\017\uffd9\021\uffd9" +
    "\001\002\000\010\011\uffe8\012\uffe8\030\310\001\002\000" +
    "\004\031\321\001\002\000\006\011\uffd3\012\uffd3\001\002" +
    "\000\006\011\uffd6\012\314\001\002\000\006\011\uffd4\012" +
    "\uffd4\001\002\000\006\003\316\021\022\001\002\000\004" +
    "\021\317\001\002\000\006\011\uffd1\012\uffd1\001\002\000" +
    "\010\011\uffe8\012\uffe8\030\310\001\002\000\006\011\uffd2" +
    "\012\uffd2\001\002\000\010\007\uffe9\011\uffe9\012\uffe9\001" +
    "\002\000\014\003\uffe2\005\uffe2\021\uffe2\024\uffe2\032\uffe2" +
    "\001\002\000\014\003\uffe7\005\uffe7\021\uffe7\024\uffe7\032" +
    "\uffe7\001\002\000\010\006\uffdc\017\uffdc\021\uffdc\001\002" +
    "\000\010\006\326\017\057\021\022\001\002\000\004\006" +
    "\327\001\002\000\014\003\uffe6\005\uffe6\021\uffe6\024\uffe6" +
    "\032\uffe6\001\002\000\010\005\uffef\006\uffef\021\uffef\001" +
    "\002\000\010\005\333\006\332\021\uffee\001\002\000\014" +
    "\003\uffdf\005\uffdf\021\uffdf\024\uffdf\032\uffdf\001\002\000" +
    "\010\006\uffdc\017\uffdc\021\uffdc\001\002\000\010\006\335" +
    "\017\057\021\022\001\002\000\004\006\336\001\002\000" +
    "\014\003\uffde\005\uffde\021\uffde\024\uffde\032\uffde\001\002" +
    "\000\004\005\340\001\002\000\012\003\342\005\uffef\006" +
    "\uffef\021\uffef\001\002\000\010\005\351\006\350\021\uffee" +
    "\001\002\000\006\005\344\006\343\001\002\000\014\003" +
    "\uffe1\005\uffe1\021\uffe1\024\uffe1\032\uffe1\001\002\000\010" +
    "\006\uffdc\017\uffdc\021\uffdc\001\002\000\010\006\346\017" +
    "\057\021\022\001\002\000\004\006\347\001\002\000\014" +
    "\003\uffe0\005\uffe0\021\uffe0\024\uffe0\032\uffe0\001\002\000" +
    "\014\003\uffe5\005\uffe5\021\uffe5\024\uffe5\032\uffe5\001\002" +
    "\000\010\006\uffdc\017\uffdc\021\uffdc\001\002\000\010\006" +
    "\353\017\057\021\022\001\002\000\004\006\354\001\002" +
    "\000\014\003\uffe4\005\uffe4\021\uffe4\024\uffe4\032\uffe4\001" +
    "\002\000\010\006\356\017\057\021\022\001\002\000\004" +
    "\002\001\001\002\000\006\007\360\012\035\001\002\000" +
    "\014\003\ufff9\005\ufff9\021\ufff9\024\ufff9\032\ufff9\001\002" +
    "\000\004\021\362\001\002\000\010\007\uffe8\012\uffe8\030" +
    "\310\001\002\000\006\007\uffeb\012\uffeb\001\002\000\006" +
    "\007\366\012\367\001\002\000\006\007\uffec\012\uffec\001" +
    "\002\000\016\003\uffed\005\uffed\006\uffed\021\uffed\024\uffed" +
    "\032\uffed\001\002\000\004\021\370\001\002\000\010\007" +
    "\uffe8\012\uffe8\030\310\001\002\000\006\007\uffea\012\uffea" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\006\001\001\000\014\005\011" +
    "\027\007\030\014\031\012\062\010\001\001\000\002\001" +
    "\001\000\004\006\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\356\001\001\000\002\001\001\000" +
    "\004\004\354\001\001\000\002\001\001\000\004\006\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\336\001\001\000\002\001" +
    "\001\000\004\003\045\001\001\000\006\005\275\062\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\051\001\001\000\010\006\053\007\055\035\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\061\010\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\065\001\001\000\006" +
    "\005\275\062\010\001\001\000\002\001\001\000\004\014" +
    "\070\001\001\000\014\013\100\015\075\020\103\021\074" +
    "\022\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\125\015\120\016\115\017\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\110\001\001\000\014" +
    "\013\100\015\075\020\103\021\074\022\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\125\015\120\017\163\001\001\000\002\001\001\000" +
    "\004\006\156\001\001\000\012\012\125\015\120\016\154" +
    "\017\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\136\001\001\000\002\001\001" +
    "\000\004\055\127\001\001\000\002\001\001\000\006\056" +
    "\133\057\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\135\015" +
    "\120\001\001\000\002\001\001\000\006\011\142\054\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\125\015\120\017\143\001\001\000\002" +
    "\001\001\000\014\012\125\015\120\016\145\017\123\041" +
    "\146\001\001\000\004\042\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\151\001\001\000\002\001" +
    "\001\000\012\012\125\015\120\016\153\017\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\125\015\120\016\160\017\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\164\001\001\000\006\011\142\054\140" +
    "\001\001\000\012\012\125\015\120\016\166\017\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\125\015\120" +
    "\016\177\017\123\040\200\043\203\047\201\001\001\000" +
    "\004\052\235\001\001\000\002\001\001\000\004\050\216" +
    "\001\001\000\002\001\001\000\004\045\204\001\001\000" +
    "\004\046\205\001\001\000\002\001\001\000\016\012\125" +
    "\015\120\016\177\017\123\043\207\047\201\001\001\000" +
    "\002\001\001\000\014\013\211\015\075\020\212\021\074" +
    "\022\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\075\020\215\021\214\022\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\217\001\001\000" +
    "\002\001\001\000\014\012\125\015\120\016\177\017\123" +
    "\047\221\001\001\000\002\001\001\000\014\013\223\015" +
    "\075\020\224\021\074\022\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\075\020\227\021\226\022" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\125\015\120\016\237" +
    "\017\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\125\015\120" +
    "\016\247\017\123\001\001\000\014\012\125\015\120\016" +
    "\145\017\123\041\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\252\001\001\000\002\001\001\000\012" +
    "\012\125\015\120\016\256\017\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\125\015" +
    "\120\016\177\017\123\040\263\043\203\047\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\266\015" +
    "\075\020\103\021\074\022\105\001\001\000\002\001\001" +
    "\000\014\013\270\015\075\020\103\021\074\022\105\001" +
    "\001\000\002\001\001\000\004\015\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\277\001\001\000\014\013\100\015\075" +
    "\020\103\021\074\022\105\001\001\000\002\001\001\000" +
    "\004\003\302\001\001\000\006\005\275\062\010\001\001" +
    "\000\004\014\304\001\001\000\014\013\100\015\075\020" +
    "\103\021\074\022\105\001\001\000\002\001\001\000\004" +
    "\032\310\001\001\000\002\001\001\000\004\036\311\001" +
    "\001\000\004\037\312\001\001\000\002\001\001\000\004" +
    "\006\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\324\001" +
    "\001\000\010\006\053\007\055\035\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\330\001\001\000" +
    "\006\005\275\062\010\001\001\000\002\001\001\000\004" +
    "\004\333\001\001\000\010\006\053\007\055\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\340\001\001\000\006\005\275\062\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\344" +
    "\001\001\000\010\006\053\007\055\035\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\351\001\001\000\010\006\053\007\055\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\053" +
    "\007\055\035\054\001\001\000\002\001\001\000\004\026" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\362\001\001\000\004\033\363\001\001\000\004\034" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\370\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
	 {
		if(s.value.toString().equals("char") && Kontekst.globalna())dekChar++;
		Kontekst.push(s);
		System.out.println(s.toString() + " " + s.value.toString());
		
	}
	return s;

    }


	
	
	
	
	//Logger log = Logger.getLogger(getClass());
	
	int dekChar = 0;
	int dekGlobNizova = 0;
	int defFunkcijaUProgramu= 0;
	int defUnutrasnjihKlasa = 0;
	int blokoviNaredbi = 0;
	int pozivFunkcijaUMain =0;
	int brojNewNaredbi =0;
	int defMetodaUnutrasnjihKlasa =0;
	int dekPoljaUnutrasnjihKlasa =0;
	int brojIzvodjenja =0;
	
	
	
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
 
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
        
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        //log.error(msg.toString());
        System.out.println(msg.toString());
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Mulop ::= PROCENAT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Mulop ::= PODELJENO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Mulop ::= PUTA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= MANJE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= MANJE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= VECE_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= VECE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= UZVICNIK_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= JEDNAKO_JEDNAKO 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Des ::= O_UGL_ZAG error Z_UGL_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Des ::= O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Des ::= TACKA IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Des",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesList ::= DesList Des 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Designator ::= IDENT DesList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= O_ZAG Expr Z_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= NEW Type O_UGL_ZAG Expr Z_UGL_ZAG 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= NEW Type 
            {
              Object RESULT =null;
		  parser.brojNewNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= Designator O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MulFac ::= Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFac",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MulFacList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MulFacList ::= MulFacList MulFac 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulFacList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Term ::= Factor MulFacList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AddTerm ::= Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AddTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AddTermList ::= AddTermList AddTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddTermList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Term AddTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Fact ::= I CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Fact",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FactList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FactList ::= FactList Fact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondTerm ::= CondFact FactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Cond ::= ILI CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Cond",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondList ::= CondList Cond 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= CondTerm CondList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Act ::= ZAREZ Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Act",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ActList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActList ::= ActList Act 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActPars ::= Expr ActList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Something ::= Designator MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Something ::= Designator PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Something ::= Designator O_ZAG ActPars error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Something ::= error Z_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Something ::= Designator O_ZAG ActPars Z_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.uMainu())parser.pozivFunkcijaUMain++;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Something ::= Designator JEDNAKO error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Something ::= Designator JEDNAKO Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Something",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= IF O_ZAG error Z_ZAG Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= RETURN TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= RETURN Expr TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.blokoviNaredbi++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= PRINT O_ZAG Expr ZAREZ NUMBER Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= PRINT O_ZAG Expr Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= READ O_ZAG Designator Z_ZAG TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= BREAK TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Something TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Unmatched ::= IF O_ZAG error Z_ZAG Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Unmatched ::= IF O_ZAG error Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Unmatched ::= IF O_ZAG Condition Z_ZAG Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Unmatched ::= IF O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= WHILE O_ZAG error Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= WHILE O_ZAG Condition Z_ZAG Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormParamDec ::= ZAREZ error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDec",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormParamDec ::= ZAREZ Type IDENT Niz 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDec",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormParamDecList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormParamDecList ::= FormParamDecList FormParamDec 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormPars ::= Type IDENT Niz FormParamDecList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Prefix ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Prefix ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Prefix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDecl ::= Prefix IDENT O_ZAG error Z_ZAG VarDeclList O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= Prefix IDENT O_ZAG FormPars Z_ZAG error O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDecl ::= Prefix IDENT O_ZAG FormPars Z_ZAG VarDeclList O_VIT_ZAG StatementList Z_VIT_ZAG 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.defMetodaUnutrasnjihKlasa++;  parser.defFunkcijaUProgramu++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassDecl ::= CLASS IDENT error O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassDecl ::= CLASS IDENT error O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG error O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG error Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl ::= CLASS IDENT O_VIT_ZAG error O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS IDENT O_VIT_ZAG error Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++;parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS IDENT EXTENDS Type O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; parser.brojIzvodjenja++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG Z_VIT_ZAG 
            {
              Object RESULT =null;
		  parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENT O_VIT_ZAG VarDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;
		 parser.defUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Niz ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Niz ::= O_UGL_ZAG Z_UGL_ZAG 
            {
              Object RESULT =null;
		 if(Kontekst.globalna())parser.dekGlobNizova++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Niz",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Id ::= ZAREZ IDENT Niz 
            {
              Object RESULT =null;
		if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Id",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IdList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IdList ::= IdList Id 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= NT$0 Type IDENT Niz IdList TACKA_ZAREZ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
if(Kontekst.uKlasi())parser.dekPoljaUnutrasnjihKlasa++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Val ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Val ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Val ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Val ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Val",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AssignVal ::= ZAREZ error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignVal",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AssignVal ::= ZAREZ IDENT JEDNAKO Val 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignVal",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AssignValList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AssignValList ::= AssignValList AssignVal 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignValList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= error AssignValList TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type IDENT JEDNAKO Val AssignValList TACKA_ZAREZ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM IDENT DeclList O_VIT_ZAG MethodDeclList Z_VIT_ZAG 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

